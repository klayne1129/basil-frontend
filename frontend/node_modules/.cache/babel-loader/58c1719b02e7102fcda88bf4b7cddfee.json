{"ast":null,"code":"var _jsxFileName = \"/Users/KatieLayne/Documents/basil-app/basil-app/src/components/recipes/RecipeComponent.jsx\";\nimport React, { Component } from 'react';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport RecipeDataService from '../../api/recipes/RecipeDataService.js';\nimport AuthenticationService from './AuthenticationService.js';\n\nclass RecipeComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      id: this.props.match.params.id,\n      title: '',\n      directions: '',\n      ingredients: '',\n      notes: '',\n      mealType: 'selectOne'\n    };\n    this.onSubmit = this.onSubmit.bind(this);\n    this.validate = this.validate.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  } //call api's in this function\n  //Get specific recipe using usernamme and Id\n  //then update the object\n\n\n  componentDidMount() {\n    if (this.state.id === -1) {\n      return;\n    }\n\n    let username = AuthenticationService.getLoggedInUser();\n    RecipeDataService.retrieveRecipe(username, this.state.id).then(response => this.setState({\n      title: response.data.title,\n      directions: response.data.directions,\n      ingredients: response.data.ingredients,\n      notes: response.data.notes,\n      mealType: response.data.mealType\n    }));\n  } //for dropdown menu\n  // handleChange(event) {\n  //     this.setState({mealType: event.target.value});\n  //   }\n  // if no value present 'enter blank'\n  // custom error message using errorMessage props\n  //errororMessage below unde render()\n\n\n  validate(values) {\n    let errors = {};\n\n    if (!values.title) {\n      errors.title = 'Enter title';\n    } else if (values.title.length < 2) {\n      errors.title = 'Title must be at least 2 characters in length';\n    }\n\n    if (!values.directions) {\n      errors.directions = 'Enter directions';\n    } else if (values.directions.length < 5) {\n      errors.directions = 'Directions must be at least 5 characters in length';\n    }\n\n    if (!values.ingredients) {\n      errors.ingredients = 'Enter ingredients';\n    } else if (values.ingredients.length < 2) {\n      errors.ingredients = 'Ingredients must be at least 2 characters in length';\n    }\n\n    return errors;\n  } //if successfuly updated redirect to list recipes page \n\n\n  onSubmit(values) {\n    let username = AuthenticationService.getLoggedInUser();\n    let recipe = {\n      id: this.state.id,\n      title: values.title,\n      directions: values.directions,\n      ingredients: values.ingredients,\n      notes: values.notes,\n      mealType: values.mealType\n    };\n\n    if (this.state.id === -1) {\n      RecipeDataService.createRecipe(username, recipe).then(() => this.props.history.push(`/recipes`));\n    } else {\n      RecipeDataService.updateRecipe(username, this.state.id, recipe).then(() => this.props.history.push(`/recipes`));\n    }\n  }\n\n  render() {\n    //destructuring \n    let {\n      title,\n      directions,\n      ingredients,\n      notes,\n      mealType\n    } = this.state;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, \"My Recipe\"), React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, React.createElement(Formik // usually you would need to list initial values as key value pairs\n    // but if the key is the same as the value you only have to \n    // list the value (name, directions, ingredients)\n    , {\n      initialValues: {\n        title,\n        directions,\n        ingredients,\n        notes,\n        mealType\n      } //sends ErrorMessages when validation fails only whens button clicked\n      //form only submited if validation passed \n      //enable reinitialization on formic or it will\n      //not update initial values, default is false\n      ,\n      onSubmit: this.onSubmit,\n      validateOnChange: false,\n      validateonBlur: false,\n      validate: this.validate,\n      enableReinitialize: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, props => React.createElement(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, React.createElement(ErrorMessage, {\n      name: \"title\",\n      component: \"div\",\n      className: \"alert alert-warning\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }), React.createElement(ErrorMessage, {\n      name: \"directions\",\n      component: \"div\",\n      className: \"alert alert-warning\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }), React.createElement(ErrorMessage, {\n      name: \"ingredients\",\n      component: \"div\",\n      className: \"alert alert-warning\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }), React.createElement(\"fieldset\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, \"Title\"), React.createElement(Field, {\n      className: \"form-control\",\n      type: \"text\",\n      name: \"title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    })), React.createElement(\"fieldset\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, \"Directions\"), React.createElement(Field, {\n      as: \"textarea\",\n      className: \"form-control\",\n      type: \"text\",\n      name: \"directions\",\n      id: \"textBox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    })), React.createElement(\"fieldset\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, \"Ingredients\"), React.createElement(Field, {\n      as: \"textarea\",\n      className: \"form-control\",\n      type: \"text\",\n      name: \"ingredients\",\n      id: \"textBox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    })), React.createElement(\"fieldset\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, \"Notes (Optional)\"), React.createElement(Field, {\n      as: \"textarea\",\n      className: \"form-control\",\n      type: \"text\",\n      name: \"notes\",\n      id: \"textBox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    })), React.createElement(\"fieldset\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, \"Meal Type\"), React.createElement(Field, {\n      as: \"select\",\n      name: \"mealType\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      selected: true,\n      value: \"selectOne\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, \"Select One\"), React.createElement(\"option\", {\n      value: \"breakfast\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, \"Breakfast\"), React.createElement(\"option\", {\n      value: \"lunch\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, \"Lunch\"), React.createElement(\"option\", {\n      value: \"dinner\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, \"Dinner\"), React.createElement(\"option\", {\n      value: \"snack\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, \"Snack\"), React.createElement(\"option\", {\n      value: \"dessert\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, \"Dessert\"))), React.createElement(\"button\", {\n      type: \"submit\",\n      className: \"btn btn-success\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, \"Save\")))));\n  }\n\n}\n\nexport default RecipeComponent; // onChange={this.handleChange}","map":{"version":3,"sources":["/Users/KatieLayne/Documents/basil-app/basil-app/src/components/recipes/RecipeComponent.jsx"],"names":["React","Component","Formik","Form","Field","ErrorMessage","RecipeDataService","AuthenticationService","RecipeComponent","constructor","props","state","id","match","params","title","directions","ingredients","notes","mealType","onSubmit","bind","validate","handleChange","componentDidMount","username","getLoggedInUser","retrieveRecipe","then","response","setState","data","values","errors","length","recipe","createRecipe","history","push","updateRecipe","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,KAAvB,EAA8BC,YAA9B,QAAkD,QAAlD;AACA,OAAOC,iBAAP,MAA8B,wCAA9B;AACA,OAAOC,qBAAP,MAAkC,4BAAlC;;AAKA,MAAMC,eAAN,SAA8BP,SAA9B,CAAwC;AACpCQ,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACTC,MAAAA,EAAE,EAAE,KAAKF,KAAL,CAAWG,KAAX,CAAiBC,MAAjB,CAAwBF,EADnB;AAETG,MAAAA,KAAK,EAAE,EAFE;AAGTC,MAAAA,UAAU,EAAE,EAHH;AAITC,MAAAA,WAAW,EAAE,EAJJ;AAKTC,MAAAA,KAAK,EAAE,EALE;AAMTC,MAAAA,QAAQ,EAAE;AAND,KAAb;AAQA,SAAKC,QAAL,GAAgB,KAAKA,QAAL,CAAcC,IAAd,CAAmB,IAAnB,CAAhB;AACA,SAAKC,QAAL,GAAgB,KAAKA,QAAL,CAAcD,IAAd,CAAmB,IAAnB,CAAhB;AACA,SAAKE,YAAL,GAAoB,KAAKA,YAAL,CAAkBF,IAAlB,CAAuB,IAAvB,CAApB;AAEH,GAhBmC,CAiBpC;AACA;AACA;;;AACAG,EAAAA,iBAAiB,GAAG;AAEhB,QAAI,KAAKb,KAAL,CAAWC,EAAX,KAAkB,CAAC,CAAvB,EAA0B;AACtB;AACH;;AAED,QAAIa,QAAQ,GAAGlB,qBAAqB,CAACmB,eAAtB,EAAf;AAEApB,IAAAA,iBAAiB,CAACqB,cAAlB,CAAiCF,QAAjC,EAA2C,KAAKd,KAAL,CAAWC,EAAtD,EACKgB,IADL,CACUC,QAAQ,IAAI,KAAKC,QAAL,CAAc;AAC5Bf,MAAAA,KAAK,EAAEc,QAAQ,CAACE,IAAT,CAAchB,KADO;AAE5BC,MAAAA,UAAU,EAAEa,QAAQ,CAACE,IAAT,CAAcf,UAFE;AAG5BC,MAAAA,WAAW,EAAEY,QAAQ,CAACE,IAAT,CAAcd,WAHC;AAI5BC,MAAAA,KAAK,EAAEW,QAAQ,CAACE,IAAT,CAAcb,KAJO;AAK5BC,MAAAA,QAAQ,EAAEU,QAAQ,CAACE,IAAT,CAAcZ;AALI,KAAd,CADtB;AAQH,GApCmC,CAsCpC;AACA;AACA;AACA;AAEA;AACA;AACA;;;AAEAG,EAAAA,QAAQ,CAACU,MAAD,EAAS;AACb,QAAIC,MAAM,GAAG,EAAb;;AACA,QAAI,CAACD,MAAM,CAACjB,KAAZ,EAAmB;AACfkB,MAAAA,MAAM,CAAClB,KAAP,GAAe,aAAf;AACH,KAFD,MAEO,IAAIiB,MAAM,CAACjB,KAAP,CAAamB,MAAb,GAAsB,CAA1B,EAA6B;AAChCD,MAAAA,MAAM,CAAClB,KAAP,GAAe,+CAAf;AACH;;AAED,QAAI,CAACiB,MAAM,CAAChB,UAAZ,EAAwB;AACpBiB,MAAAA,MAAM,CAACjB,UAAP,GAAoB,kBAApB;AACH,KAFD,MAEO,IAAIgB,MAAM,CAAChB,UAAP,CAAkBkB,MAAlB,GAA2B,CAA/B,EAAkC;AACrCD,MAAAA,MAAM,CAACjB,UAAP,GAAoB,oDAApB;AACH;;AAED,QAAI,CAACgB,MAAM,CAACf,WAAZ,EAAyB;AACrBgB,MAAAA,MAAM,CAAChB,WAAP,GAAqB,mBAArB;AACH,KAFD,MAEO,IAAIe,MAAM,CAACf,WAAP,CAAmBiB,MAAnB,GAA4B,CAAhC,EAAmC;AACtCD,MAAAA,MAAM,CAAChB,WAAP,GAAqB,qDAArB;AACH;;AAED,WAAOgB,MAAP;AACH,GApEmC,CAsEpC;;;AACAb,EAAAA,QAAQ,CAACY,MAAD,EAAS;AAEb,QAAIP,QAAQ,GAAGlB,qBAAqB,CAACmB,eAAtB,EAAf;AAEA,QAAIS,MAAM,GAAG;AACTvB,MAAAA,EAAE,EAAE,KAAKD,KAAL,CAAWC,EADN;AAETG,MAAAA,KAAK,EAAEiB,MAAM,CAACjB,KAFL;AAGTC,MAAAA,UAAU,EAAEgB,MAAM,CAAChB,UAHV;AAITC,MAAAA,WAAW,EAAEe,MAAM,CAACf,WAJX;AAKTC,MAAAA,KAAK,EAAEc,MAAM,CAACd,KALL;AAMTC,MAAAA,QAAQ,EAAEa,MAAM,CAACb;AANR,KAAb;;AASA,QAAI,KAAKR,KAAL,CAAWC,EAAX,KAAkB,CAAC,CAAvB,EAA0B;AACtBN,MAAAA,iBAAiB,CAAC8B,YAAlB,CAA+BX,QAA/B,EAAyCU,MAAzC,EACKP,IADL,CACU,MAAM,KAAKlB,KAAL,CAAW2B,OAAX,CAAmBC,IAAnB,CAAyB,UAAzB,CADhB;AAGH,KAJD,MAIO;AACHhC,MAAAA,iBAAiB,CAACiC,YAAlB,CAA+Bd,QAA/B,EAAyC,KAAKd,KAAL,CAAWC,EAApD,EAAwDuB,MAAxD,EACKP,IADL,CACU,MAAM,KAAKlB,KAAL,CAAW2B,OAAX,CAAmBC,IAAnB,CAAyB,UAAzB,CADhB;AAEH;AAEJ;;AAEDE,EAAAA,MAAM,GAAG;AACL;AACA,QAAI;AAAEzB,MAAAA,KAAF;AAASC,MAAAA,UAAT;AAAqBC,MAAAA,WAArB;AAAkCC,MAAAA,KAAlC;AAAyCC,MAAAA;AAAzC,QAAqD,KAAKR,KAA9D;AAEA,WAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADJ,EAEI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAII,oBAAC,MAAD,CAEI;AACA;AACA;AAJJ;AAKI,MAAA,aAAa,EAAE;AAAEI,QAAAA,KAAF;AAASC,QAAAA,UAAT;AAAqBC,QAAAA,WAArB;AAAkCC,QAAAA,KAAlC;AAAyCC,QAAAA;AAAzC,OALnB,CAOI;AACA;AACA;AACA;AAVJ;AAWI,MAAA,QAAQ,EAAE,KAAKC,QAXnB;AAYI,MAAA,gBAAgB,EAAE,KAZtB;AAaI,MAAA,cAAc,EAAE,KAbpB;AAcI,MAAA,QAAQ,EAAE,KAAKE,QAdnB;AAeI,MAAA,kBAAkB,EAAE,IAfxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAkBSZ,KAAD,IACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEI,oBAAC,YAAD;AAAc,MAAA,IAAI,EAAC,OAAnB;AAA2B,MAAA,SAAS,EAAC,KAArC;AAA2C,MAAA,SAAS,EAAC,qBAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,EAGI,oBAAC,YAAD;AAAc,MAAA,IAAI,EAAC,YAAnB;AAAgC,MAAA,SAAS,EAAC,KAA1C;AAAgD,MAAA,SAAS,EAAC,qBAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ,EAII,oBAAC,YAAD;AAAc,MAAA,IAAI,EAAC,aAAnB;AAAiC,MAAA,SAAS,EAAC,KAA3C;AAAiD,MAAA,SAAS,EAAC,qBAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ,EAMI;AAAU,MAAA,SAAS,EAAC,YAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADJ,EAEI,oBAAC,KAAD;AAAO,MAAA,SAAS,EAAC,cAAjB;AAAgC,MAAA,IAAI,EAAC,MAArC;AAA4C,MAAA,IAAI,EAAC,OAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CANJ,EAWI;AAAU,MAAA,SAAS,EAAC,YAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,EAEI,oBAAC,KAAD;AAAO,MAAA,EAAE,EAAC,UAAV;AAAqB,MAAA,SAAS,EAAC,cAA/B;AAA8C,MAAA,IAAI,EAAC,MAAnD;AAA0D,MAAA,IAAI,EAAC,YAA/D;AAA4E,MAAA,EAAE,EAAC,SAA/E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CAXJ,EAgBI;AAAU,MAAA,SAAS,EAAC,YAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADJ,EAEI,oBAAC,KAAD;AAAO,MAAA,EAAE,EAAC,UAAV;AAAqB,MAAA,SAAS,EAAC,cAA/B;AAA8C,MAAA,IAAI,EAAC,MAAnD;AAA0D,MAAA,IAAI,EAAC,aAA/D;AAA6E,MAAA,EAAE,EAAC,SAAhF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CAhBJ,EAqBI;AAAU,MAAA,SAAS,EAAC,YAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADJ,EAEI,oBAAC,KAAD;AAAO,MAAA,EAAE,EAAC,UAAV;AAAqB,MAAA,SAAS,EAAC,cAA/B;AAA8C,MAAA,IAAI,EAAC,MAAnD;AAA0D,MAAA,IAAI,EAAC,OAA/D;AAAuE,MAAA,EAAE,EAAC,SAA1E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CArBJ,EA0BI;AAAU,MAAA,SAAS,EAAC,YAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADJ,EAEQ,oBAAC,KAAD;AAAO,MAAA,EAAE,EAAC,QAAV;AAAmB,MAAA,IAAI,EAAC,UAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAQ,MAAA,QAAQ,MAAhB;AAAiB,MAAA,KAAK,EAAC,WAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,EAEI;AAAQ,MAAA,KAAK,EAAC,WAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAFJ,EAGI;AAAQ,MAAA,KAAK,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAHJ,EAII;AAAQ,MAAA,KAAK,EAAC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJJ,EAKI;AAAQ,MAAA,KAAK,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eALJ,EAMI;AAAQ,MAAA,KAAK,EAAC,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBANJ,CAFR,CA1BJ,EAsCI;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,SAAS,EAAC,iBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAtCJ,CAnBZ,CAJJ,CAFJ,CAFJ;AA4EH;;AA/KmC;;AAkLxC,eAAeF,eAAf,C,CAEA","sourcesContent":["import React, { Component } from 'react'\n\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport RecipeDataService from '../../api/recipes/RecipeDataService.js'\nimport AuthenticationService from './AuthenticationService.js'\n\n\n\n\nclass RecipeComponent extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            id: this.props.match.params.id,\n            title: '',\n            directions: '',\n            ingredients: '',\n            notes: '',\n            mealType: 'selectOne'\n        }\n        this.onSubmit = this.onSubmit.bind(this)\n        this.validate = this.validate.bind(this)\n        this.handleChange = this.handleChange.bind(this);\n\n    }\n    //call api's in this function\n    //Get specific recipe using usernamme and Id\n    //then update the object\n    componentDidMount() {\n\n        if (this.state.id === -1) {\n            return\n        }\n\n        let username = AuthenticationService.getLoggedInUser()\n\n        RecipeDataService.retrieveRecipe(username, this.state.id)\n            .then(response => this.setState({\n                title: response.data.title,\n                directions: response.data.directions,\n                ingredients: response.data.ingredients,\n                notes: response.data.notes,\n                mealType: response.data.mealType\n            }))\n    }\n\n    //for dropdown menu\n    // handleChange(event) {\n    //     this.setState({mealType: event.target.value});\n    //   }\n\n    // if no value present 'enter blank'\n    // custom error message using errorMessage props\n    //errororMessage below unde render()\n\n    validate(values) {\n        let errors = {}\n        if (!values.title) {\n            errors.title = 'Enter title'\n        } else if (values.title.length < 2) {\n            errors.title = 'Title must be at least 2 characters in length'\n        }\n\n        if (!values.directions) {\n            errors.directions = 'Enter directions'\n        } else if (values.directions.length < 5) {\n            errors.directions = 'Directions must be at least 5 characters in length'\n        }\n\n        if (!values.ingredients) {\n            errors.ingredients = 'Enter ingredients'\n        } else if (values.ingredients.length < 2) {\n            errors.ingredients = 'Ingredients must be at least 2 characters in length'\n        }\n\n        return errors\n    }\n\n    //if successfuly updated redirect to list recipes page \n    onSubmit(values) {\n\n        let username = AuthenticationService.getLoggedInUser()\n\n        let recipe = {\n            id: this.state.id,\n            title: values.title,\n            directions: values.directions,\n            ingredients: values.ingredients,\n            notes: values.notes,\n            mealType: values.mealType\n        }\n\n        if (this.state.id === -1) {\n            RecipeDataService.createRecipe(username, recipe)\n                .then(() => this.props.history.push(`/recipes`))\n\n        } else {\n            RecipeDataService.updateRecipe(username, this.state.id, recipe)\n                .then(() => this.props.history.push(`/recipes`))\n        }\n\n    }\n\n    render() {\n        //destructuring \n        let { title, directions, ingredients, notes, mealType} = this.state\n\n        return (\n\n            <div>\n                <h1>My Recipe</h1>\n                <div className='container'>\n\n                    {/* defining a method that accepts props as input \n                        and returns the html of the form */}\n                    <Formik\n\n                        // usually you would need to list initial values as key value pairs\n                        // but if the key is the same as the value you only have to \n                        // list the value (name, directions, ingredients)\n                        initialValues={{ title, directions, ingredients, notes, mealType}}\n\n                        //sends ErrorMessages when validation fails only whens button clicked\n                        //form only submited if validation passed \n                        //enable reinitialization on formic or it will\n                        //not update initial values, default is false\n                        onSubmit={this.onSubmit}\n                        validateOnChange={false}\n                        validateonBlur={false}\n                        validate={this.validate}\n                        enableReinitialize={true}\n                        >\n                        {\n                            (props) => (\n                                <Form>\n\n                                    <ErrorMessage name='title' component='div' className='alert alert-warning' />\n                                    <ErrorMessage name='directions' component='div' className='alert alert-warning' />\n                                    <ErrorMessage name='ingredients' component='div' className='alert alert-warning' />\n\n                                    <fieldset className='form-group'>\n                                        <label>Title</label>\n                                        <Field className='form-control' type='text' name='title' />\n                                    </fieldset>\n\n                                    <fieldset className='form-group'>\n                                        <label>Directions</label>\n                                        <Field as='textarea' className='form-control' type='text' name='directions' id='textBox' />\n                                    </fieldset>\n\n                                    <fieldset className='form-group'>\n                                        <label>Ingredients</label>\n                                        <Field as='textarea' className='form-control' type='text' name='ingredients' id='textBox'/>\n                                    </fieldset>\n\n                                    <fieldset className='form-group'>\n                                        <label>Notes (Optional)</label>\n                                        <Field as='textarea' className='form-control' type='text' name='notes' id='textBox'/>\n                                    </fieldset>\n \n                                    <fieldset className='form-group'>\n                                        <label>Meal Type</label>\n                                            <Field as='select' name='mealType'>\n                                                <option selected value='selectOne'>Select One</option>\n                                                <option value='breakfast'>Breakfast</option>\n                                                <option value='lunch'>Lunch</option>\n                                                <option value='dinner'>Dinner</option>\n                                                <option value='snack'>Snack</option>\n                                                <option value='dessert'>Dessert</option>\n                                             </Field>\n                                    </fieldset>\n\n                                    <button type=\"submit\" className='btn btn-success'>Save</button>\n\n                                </Form>\n                            )\n                        }\n                    </Formik>\n\n                </div>\n\n            </div>\n        )\n    }\n}\n\nexport default RecipeComponent\n\n// onChange={this.handleChange}"]},"metadata":{},"sourceType":"module"}
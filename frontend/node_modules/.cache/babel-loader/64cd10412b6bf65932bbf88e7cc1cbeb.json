{"ast":null,"code":"var _jsxFileName = \"/Users/KatieLayne/Documents/basil-app/basil-app/src/components/recipes/SearchComponent.jsx\";\nimport React, { Component } from 'react';\nimport AuthenticationService from './AuthenticationService.js';\nimport RecipeDataService from '../../api/recipes/RecipeDataService.js';\n\nclass SearchComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      recipes: [],\n      filterByField: \"all\",\n      filterByTerm: ''\n    };\n    this.refreshRecipes = this.refreshRecipes.bind(this);\n  }\n\n  componentDidMount() {\n    console.log(\"component did Mount\");\n    this.refreshRecipes();\n  }\n\n  refreshRecipes() {\n    //use the username by using authentication service\n    let username = AuthenticationService.getLoggedInUser();\n    RecipeDataService.retrieveAllRecipes(username).then(response => {\n      // console.log(response)\n      this.setState({\n        recipes: response.data\n      });\n    });\n  } // model code\n  //This function looks at the state's filterByField and filterByTerm and then returns a list of Recipe objects based on the parameters\n\n\n  recipeList() {\n    let filterBy = this.state.filterByField;\n    let searchterm = this.state.filterByTerm.replace(/^\\s+|\\s+$/g, '');\n    return this.state.recipes.map(function (currentRecipe, i) {\n      if (filterBy === 'all' && (currentRecipe.recipe_name.toLowerCase().includes(searchterm.toLowerCase()) || currentRecipe.recipe_ingredients.toLowerCase().includes(searchterm.toLowerCase()) || currentRecipe.recipe_category.toLowerCase().includes(searchterm.toLowerCase())) || filterBy === 'name' && currentRecipe.recipe_name.toLowerCase().includes(searchterm.toLowerCase()) || filterBy === 'ingredients' && currentRecipe.recipe_ingredients.toLowerCase().includes(searchterm.toLowerCase()) || filterBy === 'category' && currentRecipe.recipe_category.toLowerCase().includes(searchterm.toLowerCase())) return React.createElement(Recipe, {\n        recipe: currentRecipe,\n        key: i,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      });\n    });\n  } //This will handle any changes to the search category\n\n\n  handleFilter(e) {\n    this.setState({\n      filterByTerm: '',\n      filterByField: e.target.value\n    });\n  } //Handles any changes to search term\n\n\n  handleTerm(e) {\n    this.setState({\n      filterByTerm: e.target.value\n    });\n  }\n\n  render() {\n    //Creates a searchbar variable\n    let searchBar; //if the search field is filtering by recipe category, it will set searchBar to a group of radio buttons\n\n    if (this.state.filterByField === 'category') {\n      searchBar = React.createElement(\"div\", {\n        className: \"form-group row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, React.createElement(ButtonGroup, {\n        toggle: true,\n        className: \"mt-1 ml-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, React.createElement(ToggleButton, {\n        type: \"radio\",\n        name: \"radio\",\n        value: \"appetizer\",\n        checked: this.state.filterByTerm === \"appetizer\",\n        onChange: this.handleTerm,\n        variant: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, \"Appetizers\"), React.createElement(ToggleButton, {\n        type: \"radio\",\n        name: \"radio\",\n        value: \"entree\",\n        checked: this.state.filterByTerm === \"entree\",\n        onChange: this.handleTerm,\n        variant: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, \"Entrees\"), React.createElement(ToggleButton, {\n        type: \"radio\",\n        name: \"radio\",\n        value: \"dessert\",\n        checked: this.state.filterByTerm === \"dessert\",\n        onChange: this.handleTerm,\n        variant: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, \"Desserts\"), React.createElement(ToggleButton, {\n        type: \"radio\",\n        name: \"radio\",\n        value: \"snack\",\n        checked: this.state.filterByTerm === \"snack\",\n        onChange: this.handleTerm,\n        variant: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, \"Snacks\"), React.createElement(ToggleButton, {\n        type: \"radio\",\n        name: \"radio\",\n        value: \"drink\",\n        checked: this.state.filterByTerm === \"drink\",\n        onChange: this.handleTerm,\n        variant: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, \"Drinks\"))); //if search Field is set to anything other than category, it sets searchBar to a text input that will live update due to how the onChange attribute works\n    } else {\n      searchBar = React.createElement(\"div\", {\n        className: \"form-group row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-xs-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        placeholder: \"Filter Term\",\n        value: this.state.filterByTerm,\n        className: \"inputmargin form-control\",\n        type: \"text\",\n        onChange: this.handleTerm,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      })));\n    }\n\n    return React.createElement(\"div\", {\n      className: \"container pt-4\",\n      role: \"main\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      className: \"mt-3 ml-2 display-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, \"Your Recipe Box\"), React.createElement(\"div\", {\n      className: \"container \",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, \"Filter by:\"), React.createElement(ButtonGroup, {\n      toggle: true,\n      className: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, React.createElement(ToggleButton, {\n      type: \"radio\",\n      name: \"radio\",\n      defaultChecked: true,\n      value: \"all\",\n      checked: this.state.filterByField === \"all\",\n      onChange: this.handleFilter,\n      variant: \"success\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, \"All\"), React.createElement(ToggleButton, {\n      type: \"radio\",\n      name: \"radio\",\n      defaultChecked: true,\n      value: \"name\",\n      checked: this.state.filterByField === \"name\",\n      onChange: this.handleFilter,\n      variant: \"success\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, \"Name\"), React.createElement(ToggleButton, {\n      type: \"radio\",\n      name: \"radio\",\n      defaultChecked: true,\n      value: \"ingredients\",\n      checked: this.state.filterByField === \"ingredients\",\n      onChange: this.handleFilter,\n      variant: \"success\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, \"Ingredients\"), React.createElement(ToggleButton, {\n      type: \"radio\",\n      name: \"radio\",\n      defaultChecked: true,\n      value: \"category\",\n      checked: this.state.filterByField === \"Category\",\n      onChange: this.handleFilter,\n      variant: \"success\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, \"Category\")), searchBar, React.createElement(\"p\", {\n      className: \"lead\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, \"Click on recipe picture for ingredients and steps!\")), React.createElement(CardColumns, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, this.recipeList()), React.createElement(\"script\", {\n      src: \"script.js\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default SearchComponent;","map":{"version":3,"sources":["/Users/KatieLayne/Documents/basil-app/basil-app/src/components/recipes/SearchComponent.jsx"],"names":["React","Component","AuthenticationService","RecipeDataService","SearchComponent","constructor","props","state","recipes","filterByField","filterByTerm","refreshRecipes","bind","componentDidMount","console","log","username","getLoggedInUser","retrieveAllRecipes","then","response","setState","data","recipeList","filterBy","searchterm","replace","map","currentRecipe","i","recipe_name","toLowerCase","includes","recipe_ingredients","recipe_category","handleFilter","e","target","value","handleTerm","render","searchBar"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport AuthenticationService from './AuthenticationService.js'\nimport RecipeDataService from '../../api/recipes/RecipeDataService.js'\n\n\nclass SearchComponent extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            recipes: [],\n            filterByField: \"all\",\n            filterByTerm: ''\n        }\n        this.refreshRecipes = this.refreshRecipes.bind(this);\n    }\n\n    componentDidMount() {\n\n        console.log(\"component did Mount\")\n        this.refreshRecipes();\n    }\n\n    refreshRecipes(){\n\n        //use the username by using authentication service\n        let username = AuthenticationService.getLoggedInUser()\n        RecipeDataService.retrieveAllRecipes(username)\n            .then(\n                response => {\n                    // console.log(response)\n                    this.setState({recipes : response.data})\n                }\n            )\n    }\n    \n// model code\n//This function looks at the state's filterByField and filterByTerm and then returns a list of Recipe objects based on the parameters\nrecipeList() {\n    let filterBy = this.state.filterByField\n    let searchterm = this.state.filterByTerm.replace(/^\\s+|\\s+$/g, '') \n    return this.state.recipes.map(function(currentRecipe, i){\n\n\n        if ((filterBy === 'all' && (currentRecipe.recipe_name.toLowerCase().includes(searchterm.toLowerCase()) \n                                 || currentRecipe.recipe_ingredients.toLowerCase().includes(searchterm.toLowerCase())\n                                 || currentRecipe.recipe_category.toLowerCase().includes(searchterm.toLowerCase()))) \n            || (filterBy === 'name' && currentRecipe.recipe_name.toLowerCase().includes(searchterm.toLowerCase()))\n            || (filterBy === 'ingredients' && currentRecipe.recipe_ingredients.toLowerCase().includes(searchterm.toLowerCase()))\n            || (filterBy === 'category' && currentRecipe.recipe_category.toLowerCase().includes(searchterm.toLowerCase())))\n        return <Recipe recipe={currentRecipe} key={i} />\n    })\n}\n//This will handle any changes to the search category\nhandleFilter(e) {\n    this.setState({\n        filterByTerm: '',\n        filterByField: e.target.value\n    })\n}\n//Handles any changes to search term\nhandleTerm(e) {\n    this.setState({\n        filterByTerm: e.target.value\n    })\n}\n\n\n    render() {\n        //Creates a searchbar variable\n        let searchBar;\n\n        //if the search field is filtering by recipe category, it will set searchBar to a group of radio buttons\n        if (this.state.filterByField === 'category') {\n            searchBar =\n            <div className='form-group row'><ButtonGroup toggle className=\"mt-1 ml-3\" >\n            \n                    <ToggleButton type=\"radio\" \n                            name=\"radio\" \n                            value=\"appetizer\" \n                            checked={this.state.filterByTerm === \"appetizer\"}\n                            onChange={this.handleTerm}\n                            variant='primary'>\n                    Appetizers\n                    </ToggleButton>\n                    <ToggleButton type=\"radio\" \n                            name=\"radio\" \n                            value=\"entree\" \n                            checked={this.state.filterByTerm === \"entree\"}\n                            onChange={this.handleTerm}\n                            variant='primary'>\n                    Entrees\n                    </ToggleButton>\n                    <ToggleButton type=\"radio\" \n                            name=\"radio\" \n                            value=\"dessert\" \n                            checked={this.state.filterByTerm === \"dessert\"}\n                            onChange={this.handleTerm}\n                            variant='primary'>\n                    Desserts\n                    </ToggleButton>\n                    <ToggleButton type=\"radio\" \n                            name=\"radio\" \n                            value=\"snack\" \n                            checked={this.state.filterByTerm === \"snack\"}\n                            onChange={this.handleTerm}\n                            variant='primary'>\n                    Snacks\n                    </ToggleButton><ToggleButton type=\"radio\" \n                            name=\"radio\" \n                            value=\"drink\" \n                            checked={this.state.filterByTerm === \"drink\"}\n                            onChange={this.handleTerm}\n                            variant='primary'>\n                    Drinks\n                    </ToggleButton>\n                    \n    \n                </ButtonGroup></div>\n        \n        //if search Field is set to anything other than category, it sets searchBar to a text input that will live update due to how the onChange attribute works\n        } else {\n            searchBar =\n            <div className='form-group row'>\n                <div className='col-xs-4'>\n                    <input placeholder='Filter Term'\n                           value ={this.state.filterByTerm}\n                           className='inputmargin form-control'\n                           type='text'\n                           onChange={this.handleTerm}>\n                    </input>\n                </div>\n            </div>\n        }\n\n        return (\n            \n            <div className='container pt-4' role='main'>\n                <br></br>\n                <h3 className='mt-3 ml-2 display-3'>Your Recipe Box</h3>\n                \n                <div className='container '>\n                    <h5>Filter by:</h5>\n                    <ButtonGroup toggle className=\"\" >\n                        <ToggleButton type=\"radio\" \n                                name=\"radio\" \n                                defaultChecked \n                                value=\"all\" \n                                checked={this.state.filterByField === \"all\"}\n                                onChange={this.handleFilter}\n                                variant='success'>\n                                    \n                        All\n                        </ToggleButton>\n                        <ToggleButton type=\"radio\" \n                                name=\"radio\" \n                                defaultChecked \n                                value=\"name\" \n                                checked={this.state.filterByField === \"name\"}\n                                onChange={this.handleFilter}\n                                variant='success'>\n                        Name\n                        </ToggleButton>\n                        <ToggleButton type=\"radio\" \n                                name=\"radio\" \n                                defaultChecked \n                                value=\"ingredients\" \n                                checked={this.state.filterByField === \"ingredients\"}\n                                onChange={this.handleFilter}\n                                variant='success'>\n                        Ingredients\n                        </ToggleButton>\n                        <ToggleButton type=\"radio\" \n                                name=\"radio\" \n                                defaultChecked \n                                value=\"category\" \n                                checked={this.state.filterByField === \"Category\"}\n                                onChange={this.handleFilter}\n                                variant='success'>\n                        Category\n                        </ToggleButton>\n        \n                    </ButtonGroup>\n\n                    \n                    {searchBar}\n                    \n\n                <p className='lead'>Click on recipe picture for ingredients and steps!</p>\n                </div>\n                    \n                    \n                    \n                <CardColumns>{this.recipeList()}</CardColumns>\n                <script src='script.js'></script>\n            </div>\n        )\n    }\n}\n\n\n\n\n\n\n\n\nexport default SearchComponent"]},"metadata":{},"sourceType":"module"}
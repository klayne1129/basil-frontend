{"ast":null,"code":"import axios from 'axios';\nimport { API_URL } from '../../Constants.js'; //create a constant for the key used for session storage\n\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser';\n\nclass AuthenticationService {\n  // need to send a post request with the username and password\n  executeJWTAuthenticationService(username, password) {\n    return axios.post(`${API_URL}/authenticate`, {\n      username,\n      password\n    });\n  }\n\n  registerSuccessfulLoginForJwt(username, token) {\n    sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username);\n    this.setupAxiosInterceptors(this.createJWTToken(token));\n  }\n\n  createJWTToken(token) {\n    return 'Bearer ' + token;\n  } //when a user logs out the value from session storage is removed\n\n\n  logout() {\n    sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n  } //checks to see if a user has logged in to app\n\n\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n\n    if (user === null) {\n      return false;\n    }\n\n    return true;\n  } //gets a specific user\n\n\n  getLoggedInUser() {\n    let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n\n    if (user === null) {\n      return '';\n    }\n\n    return user;\n  } //checks if admin\n\n\n  getAdminUser() {\n    let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n\n    if (user === 'basil') {\n      return user;\n    }\n\n    return '';\n  } //this will add an dditional parameter to axios get method call to make sure it sends an \n  //authorization header\n  // Method adding an intercepter (see axios github documentation) by creating a simple method that\n  //adds an authorization header to every request.\n  // you want to call this method at log in.\n\n\n  setupAxiosInterceptors(token) {\n    axios.interceptors.request.use(config => {\n      if (this.isUserLoggedIn()) {\n        config.headers.authorization = token;\n      }\n\n      return config;\n    });\n  } //connect to backend BasicAuthenticationController using path\n\n\n  executeBasicAuthenticationService(username, password) {\n    return axios.get(`${API_URL}/basicauth`, {\n      headers: {\n        authorization: this.createBasicAuthToken(username, password)\n      }\n    });\n  }\n\n  createBasicAuthToken(username, password) {\n    return 'Basic ' + window.btoa(username + \":\" + password);\n  } // whenever a user logs in successfully, send that data to session storage\n\n\n  registerSuccessfulLogin(username, password) {\n    // console.log(\"registered login\")\n    sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username);\n    this.setupAxiosInterceptors(this.createBasicAuthToken(username, password));\n  }\n\n} //for react components export the class directly\n//for helper services, export an instance of the class  as an object\n\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["/Users/KatieLayne/Documents/basil-app/basil-app/src/components/recipes/AuthenticationService.js"],"names":["axios","API_URL","USER_NAME_SESSION_ATTRIBUTE_NAME","AuthenticationService","executeJWTAuthenticationService","username","password","post","registerSuccessfulLoginForJwt","token","sessionStorage","setItem","setupAxiosInterceptors","createJWTToken","logout","removeItem","isUserLoggedIn","user","getItem","getLoggedInUser","getAdminUser","interceptors","request","use","config","headers","authorization","executeBasicAuthenticationService","get","createBasicAuthToken","window","btoa","registerSuccessfulLogin"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,oBAAxB,C,CACA;;AACA,OAAO,MAAMC,gCAAgC,GAAG,mBAAzC;;AAEP,MAAMC,qBAAN,CAA4B;AAExB;AACAC,EAAAA,+BAA+B,CAACC,QAAD,EAAWC,QAAX,EAAqB;AAEhD,WAAON,KAAK,CAACO,IAAN,CAAY,GAAEN,OAAQ,eAAtB,EAAsC;AACzCI,MAAAA,QADyC;AAEzCC,MAAAA;AAFyC,KAAtC,CAAP;AAIH;;AAEDE,EAAAA,6BAA6B,CAACH,QAAD,EAAWI,KAAX,EAAkB;AAC3CC,IAAAA,cAAc,CAACC,OAAf,CAAuBT,gCAAvB,EAAyDG,QAAzD;AACA,SAAKO,sBAAL,CAA4B,KAAKC,cAAL,CAAoBJ,KAApB,CAA5B;AACH;;AAEDI,EAAAA,cAAc,CAACJ,KAAD,EAAQ;AAClB,WAAO,YAAYA,KAAnB;AACH,GAlBuB,CAoBxB;;;AACAK,EAAAA,MAAM,GAAG;AACLJ,IAAAA,cAAc,CAACK,UAAf,CAA0Bb,gCAA1B;AACH,GAvBuB,CAyBxB;;;AACAc,EAAAA,cAAc,GAAG;AACb,QAAIC,IAAI,GAAGP,cAAc,CAACQ,OAAf,CAAuBhB,gCAAvB,CAAX;;AACA,QAAIe,IAAI,KAAK,IAAb,EAAmB;AACf,aAAO,KAAP;AACH;;AACD,WAAO,IAAP;AACH,GAhCuB,CAkCxB;;;AACAE,EAAAA,eAAe,GAAG;AACd,QAAIF,IAAI,GAAGP,cAAc,CAACQ,OAAf,CAAuBhB,gCAAvB,CAAX;;AACA,QAAIe,IAAI,KAAK,IAAb,EAAmB;AACf,aAAO,EAAP;AACH;;AACD,WAAOA,IAAP;AACH,GAzCuB,CA0CxB;;;AACAG,EAAAA,YAAY,GAAG;AACX,QAAIH,IAAI,GAAGP,cAAc,CAACQ,OAAf,CAAuBhB,gCAAvB,CAAX;;AACA,QAAIe,IAAI,KAAK,OAAb,EAAsB;AAClB,aAAOA,IAAP;AACH;;AACD,WAAO,EAAP;AACH,GAjDuB,CAmDxB;AACA;AACA;AACA;AACA;;;AACAL,EAAAA,sBAAsB,CAACH,KAAD,EAAQ;AAC1BT,IAAAA,KAAK,CAACqB,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACKC,MAAD,IAAY;AACR,UAAI,KAAKR,cAAL,EAAJ,EAA2B;AACvBQ,QAAAA,MAAM,CAACC,OAAP,CAAeC,aAAf,GAA+BjB,KAA/B;AACH;;AACD,aAAOe,MAAP;AACH,KANL;AAQH,GAjEuB,CAoExB;;;AACAG,EAAAA,iCAAiC,CAACtB,QAAD,EAAWC,QAAX,EAAqB;AAElD,WAAON,KAAK,CAAC4B,GAAN,CAAW,GAAE3B,OAAQ,YAArB,EACH;AAAEwB,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,EAAE,KAAKG,oBAAL,CAA0BxB,QAA1B,EAAoCC,QAApC;AAAjB;AAAX,KADG,CAAP;AAEH;;AAEDuB,EAAAA,oBAAoB,CAACxB,QAAD,EAAWC,QAAX,EAAqB;AACrC,WAAO,WAAWwB,MAAM,CAACC,IAAP,CAAY1B,QAAQ,GAAG,GAAX,GAAiBC,QAA7B,CAAlB;AACH,GA7EuB,CA+ExB;;;AACA0B,EAAAA,uBAAuB,CAAC3B,QAAD,EAAWC,QAAX,EAAqB;AAExC;AACAI,IAAAA,cAAc,CAACC,OAAf,CAAuBT,gCAAvB,EAAyDG,QAAzD;AACA,SAAKO,sBAAL,CAA4B,KAAKiB,oBAAL,CAA0BxB,QAA1B,EAAoCC,QAApC,CAA5B;AAEH;;AAtFuB,C,CA0F5B;AACA;;;AACA,eAAe,IAAIH,qBAAJ,EAAf","sourcesContent":["import axios from 'axios'\nimport { API_URL } from '../../Constants.js'\n//create a constant for the key used for session storage\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser'\n\nclass AuthenticationService {\n\n    // need to send a post request with the username and password\n    executeJWTAuthenticationService(username, password) {\n\n        return axios.post(`${API_URL}/authenticate`, {\n            username,\n            password\n        })\n    }\n\n    registerSuccessfulLoginForJwt(username, token) {\n        sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username)\n        this.setupAxiosInterceptors(this.createJWTToken(token))\n    }\n\n    createJWTToken(token) {\n        return 'Bearer ' + token\n    }\n\n    //when a user logs out the value from session storage is removed\n    logout() {\n        sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\n    }\n\n    //checks to see if a user has logged in to app\n    isUserLoggedIn() {\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\n        if (user === null) {\n            return false\n        }\n        return true\n    }\n\n    //gets a specific user\n    getLoggedInUser() {\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\n        if (user === null) {\n            return ''\n        }\n        return user\n    }\n    //checks if admin\n    getAdminUser() {\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\n        if (user === 'basil') {\n            return user\n        }\n        return ''\n    }\n\n    //this will add an dditional parameter to axios get method call to make sure it sends an \n    //authorization header\n    // Method adding an intercepter (see axios github documentation) by creating a simple method that\n    //adds an authorization header to every request.\n    // you want to call this method at log in.\n    setupAxiosInterceptors(token) {\n        axios.interceptors.request.use(\n            (config) => {\n                if (this.isUserLoggedIn()) {\n                    config.headers.authorization = token\n                }\n                return config\n            }\n        )\n    }\n\n\n    //connect to backend BasicAuthenticationController using path\n    executeBasicAuthenticationService(username, password) {\n\n        return axios.get(`${API_URL}/basicauth`,\n            { headers: { authorization: this.createBasicAuthToken(username, password) } })\n    }\n\n    createBasicAuthToken(username, password) {\n        return 'Basic ' + window.btoa(username + \":\" + password)\n    }\n\n    // whenever a user logs in successfully, send that data to session storage\n    registerSuccessfulLogin(username, password) {\n\n        // console.log(\"registered login\")\n        sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username)\n        this.setupAxiosInterceptors(this.createBasicAuthToken(username, password))\n\n    }\n\n}\n\n//for react components export the class directly\n//for helper services, export an instance of the class  as an object\nexport default new AuthenticationService()"]},"metadata":{},"sourceType":"module"}
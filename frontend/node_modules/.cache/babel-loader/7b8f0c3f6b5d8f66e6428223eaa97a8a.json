{"ast":null,"code":"var _jsxFileName = \"/Users/KatieLayne/Documents/basil-app/basil-app/src/components/recipes/SearchComponent.jsx\";\nimport React, { Component } from 'react';\nimport AuthenticationService from './AuthenticationService.js';\nimport RecipeDataService from '../../api/recipes/RecipeDataService.js';\nimport { Card, ListGroup, CardColumns, ButtonGroup, ToggleButton, Badge } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport logo from \"./logo2.png\";\n\nconst Recipe = props => React.createElement(Link, {\n  to: '/view/' + props.recipe.id,\n  className: \"link\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 11\n  },\n  __self: this\n}, React.createElement(Card, {\n  className: \"shadow grow\",\n  bg: \"light\",\n  style: {\n    marginTop: 10\n  },\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 12\n  },\n  __self: this\n}, React.createElement(Card.Header, {\n  className: \"h5\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 17\n  },\n  __self: this\n}, props.recipe.title, \" \", React.createElement(Badge, {\n  variant: \"success\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 17\n  },\n  __self: this\n}, props.recipe.mealType)), React.createElement(ListGroup, {\n  variant: \"flush\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 18\n  },\n  __self: this\n})));\n\nclass SearchComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      recipes: [],\n      filterByField: \"all\",\n      filterByTerm: ''\n    };\n    this.refreshRecipes = this.refreshRecipes.bind(this);\n    this.handleFilter = this.handleFilter.bind(this);\n    this.handleTerm = this.handleTerm.bind(this);\n  }\n\n  componentDidMount() {\n    console.log(\"component did Mount\");\n    this.refreshRecipes();\n  }\n\n  refreshRecipes() {\n    //use the username by using authentication service\n    let username = AuthenticationService.getLoggedInUser();\n    RecipeDataService.retrieveAllRecipes(username).then(response => {\n      // console.log(response)\n      this.setState({\n        recipes: response.data\n      });\n    });\n  } // model code\n  //This function looks at the state's filterByField and filterByTerm and then returns a list of Recipe objects based on the parameters\n\n\n  recipeList() {\n    let filterBy = this.state.filterByField;\n    let searchterm = this.state.filterByTerm.replace(/^\\s+|\\s+$/g, '');\n    return this.state.recipes.map(function (currentRecipe, i) {\n      if (filterBy === 'all' && (currentRecipe.title.toLowerCase().includes(searchterm.toLowerCase()) || currentRecipe.ingredients.toLowerCase().includes(searchterm.toLowerCase()) || currentRecipe.mealType.toLowerCase().includes(searchterm.toLowerCase())) || filterBy === 'title' && currentRecipe.title.toLowerCase().includes(searchterm.toLowerCase()) || filterBy === 'ingredients' && currentRecipe.ingredients.toLowerCase().includes(searchterm.toLowerCase()) || filterBy === 'mealType' && currentRecipe.mealType.toLowerCase().includes(searchterm.toLowerCase())) return React.createElement(Recipe, {\n        recipe: currentRecipe,\n        key: i,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      });\n    });\n  } //This will handle any changes to the search category\n\n\n  handleFilter(e) {\n    this.setState({\n      filterByTerm: '',\n      filterByField: e.target.value\n    });\n  } //Handles any changes to search term\n\n\n  handleTerm(e) {\n    this.setState({\n      filterByTerm: e.target.value\n    });\n  }\n\n  render() {\n    //Creates a searchbar variable\n    let searchBar; //if the search field is filtering by recipe category, it will set searchBar to a group of radio buttons\n\n    if (this.state.filterByField === 'mealType') {\n      searchBar = React.createElement(\"div\", {\n        className: \"form-group row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, React.createElement(ButtonGroup, {\n        toggle: true,\n        className: \"mt-1 ml-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, React.createElement(ToggleButton, {\n        type: \"radio\",\n        name: \"radio\",\n        value: \"breakfast\",\n        checked: this.state.filterByTerm === \"breakfast\",\n        onChange: this.handleTerm,\n        variant: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, \"Breakfast\"), React.createElement(ToggleButton, {\n        type: \"radio\",\n        name: \"radio\",\n        value: \"lunch\",\n        checked: this.state.filterByTerm === \"lunch\",\n        onChange: this.handleTerm,\n        variant: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, \"Lunch\"), React.createElement(ToggleButton, {\n        type: \"radio\",\n        name: \"radio\",\n        value: \"dessert\",\n        checked: this.state.filterByTerm === \"dessert\",\n        onChange: this.handleTerm,\n        variant: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, \"Desserts\"), React.createElement(ToggleButton, {\n        type: \"radio\",\n        name: \"radio\",\n        value: \"snack\",\n        checked: this.state.filterByTerm === \"snack\",\n        onChange: this.handleTerm,\n        variant: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, \"Snacks\"), React.createElement(ToggleButton, {\n        type: \"radio\",\n        name: \"radio\",\n        value: \"dinner\",\n        checked: this.state.filterByTerm === \"dinner\",\n        onChange: this.handleTerm,\n        variant: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, \"Dinner\"))); //if search Field is set to anything other than category, it sets searchBar to a text input that will live update due to how the onChange attribute works\n    } else {\n      searchBar = React.createElement(\"div\", {\n        className: \"form-group row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-xs-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        placeholder: \"SearchTerm\",\n        value: this.state.filterByTerm,\n        className: \"inputmargin form-control\",\n        type: \"text\",\n        onChange: this.handleTerm,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      })));\n    }\n\n    return React.createElement(\"div\", {\n      className: \"container pt-4\",\n      role: \"main\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      src: logo,\n      width: \"70\",\n      alt: \"github.com/klayne1129\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"container \",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, \"Search by:\"), React.createElement(ButtonGroup, {\n      toggle: true,\n      className: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, React.createElement(ToggleButton, {\n      type: \"radio\",\n      name: \"radio\",\n      defaultChecked: true,\n      value: \"all\",\n      checked: this.state.filterByField === \"all\",\n      onChange: this.handleFilter,\n      variant: \"dark\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, \"All\"), React.createElement(ToggleButton, {\n      type: \"radio\",\n      name: \"radio\",\n      defaultChecked: true,\n      value: \"title\",\n      checked: this.state.filterByField === \"title\",\n      onChange: this.handleFilter,\n      variant: \"dark\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, \"Name\"), React.createElement(ToggleButton, {\n      type: \"radio\",\n      name: \"radio\",\n      defaultChecked: true,\n      value: \"ingredients\",\n      checked: this.state.filterByField === \"ingredients\",\n      onChange: this.handleFilter,\n      variant: \"dark\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, \"Ingredients\"), React.createElement(ToggleButton, {\n      type: \"radio\",\n      name: \"radio\",\n      defaultChecked: true,\n      value: \"mealType\",\n      checked: this.state.filterByField === \"mealType\",\n      onChange: this.handleFilter,\n      variant: \"dark\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, \"Meal Type\")), searchBar), React.createElement(CardColumns, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }, this.recipeList()));\n  }\n\n}\n\nexport default SearchComponent;","map":{"version":3,"sources":["/Users/KatieLayne/Documents/basil-app/basil-app/src/components/recipes/SearchComponent.jsx"],"names":["React","Component","AuthenticationService","RecipeDataService","Card","ListGroup","CardColumns","ButtonGroup","ToggleButton","Badge","Link","logo","Recipe","props","recipe","id","marginTop","title","mealType","SearchComponent","constructor","state","recipes","filterByField","filterByTerm","refreshRecipes","bind","handleFilter","handleTerm","componentDidMount","console","log","username","getLoggedInUser","retrieveAllRecipes","then","response","setState","data","recipeList","filterBy","searchterm","replace","map","currentRecipe","i","toLowerCase","includes","ingredients","e","target","value","render","searchBar"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport AuthenticationService from './AuthenticationService.js'\nimport RecipeDataService from '../../api/recipes/RecipeDataService.js'\nimport {Card, ListGroup, CardColumns, ButtonGroup, ToggleButton, Badge} from 'react-bootstrap';\nimport {Link} from 'react-router-dom'\nimport logo from \"./logo2.png\"\n\n\nconst Recipe = props => (\n    \n    <Link to={'/view/' + props.recipe.id} className=\"link\">\n    <Card className=\"shadow grow\"bg='light' style={{ marginTop: 10}} >\n        \n        \n            \n        \n               <Card.Header className='h5'>{props.recipe.title} <Badge variant='success'>{props.recipe.mealType}</Badge></Card.Header> \n                    <ListGroup variant=\"flush\" >\n                    \n                    </ListGroup>\n            \n        \n    </Card>\n    </Link>\n  \n\n)\n\nclass SearchComponent extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            recipes: [],\n            filterByField: \"all\",\n            filterByTerm: ''\n        }\n        this.refreshRecipes = this.refreshRecipes.bind(this);\n        this.handleFilter = this.handleFilter.bind(this);\n        this.handleTerm = this.handleTerm.bind(this);\n    }\n\n    componentDidMount() {\n\n        console.log(\"component did Mount\")\n        this.refreshRecipes();\n    }\n\n    refreshRecipes(){\n\n        //use the username by using authentication service\n        let username = AuthenticationService.getLoggedInUser()\n        RecipeDataService.retrieveAllRecipes(username)\n            .then(\n                response => {\n                    // console.log(response)\n                    this.setState({recipes : response.data})\n                }\n            )\n    }\n    \n// model code\n\n//This function looks at the state's filterByField and filterByTerm and then returns a list of Recipe objects based on the parameters\nrecipeList() {\n    let filterBy = this.state.filterByField\n    let searchterm = this.state.filterByTerm.replace(/^\\s+|\\s+$/g, '') \n    return this.state.recipes.map(function(currentRecipe, i){\n\n\n        if ((filterBy === 'all' && (currentRecipe.title.toLowerCase().includes(searchterm.toLowerCase()) \n                                 || currentRecipe.ingredients.toLowerCase().includes(searchterm.toLowerCase())\n                                 || currentRecipe.mealType.toLowerCase().includes(searchterm.toLowerCase()))) \n            || (filterBy === 'title' && currentRecipe.title.toLowerCase().includes(searchterm.toLowerCase()))\n            || (filterBy === 'ingredients' && currentRecipe.ingredients.toLowerCase().includes(searchterm.toLowerCase()))\n            || (filterBy === 'mealType' && currentRecipe.mealType.toLowerCase().includes(searchterm.toLowerCase())))\n        return <Recipe recipe={currentRecipe} key={i} />\n    });\n}\n//This will handle any changes to the search category\nhandleFilter(e) {\n    this.setState({\n        filterByTerm: '',\n        filterByField: e.target.value\n    })\n}\n//Handles any changes to search term\nhandleTerm(e) {\n    this.setState({\n        filterByTerm: e.target.value\n    })\n}\n\n\n    render() {\n        //Creates a searchbar variable\n        let searchBar;\n\n        //if the search field is filtering by recipe category, it will set searchBar to a group of radio buttons\n        if (this.state.filterByField === 'mealType') {\n            searchBar =\n            <div className='form-group row'><ButtonGroup toggle className=\"mt-1 ml-3\" >\n            \n                    <ToggleButton type=\"radio\" \n                            name=\"radio\" \n                            value=\"breakfast\" \n                            checked={this.state.filterByTerm === \"breakfast\"}\n                            onChange={this.handleTerm}\n                            variant='primary'>\n                    Breakfast\n                    </ToggleButton>\n                    <ToggleButton type=\"radio\" \n                            name=\"radio\" \n                            value=\"lunch\" \n                            checked={this.state.filterByTerm === \"lunch\"}\n                            onChange={this.handleTerm}\n                            variant='primary'>\n                    Lunch\n                    </ToggleButton>\n                    <ToggleButton type=\"radio\" \n                            name=\"radio\" \n                            value=\"dessert\" \n                            checked={this.state.filterByTerm === \"dessert\"}\n                            onChange={this.handleTerm}\n                            variant='primary'>\n                    Desserts\n                    </ToggleButton>\n                    <ToggleButton type=\"radio\" \n                            name=\"radio\" \n                            value=\"snack\" \n                            checked={this.state.filterByTerm === \"snack\"}\n                            onChange={this.handleTerm}\n                            variant='primary'>\n                    Snacks\n                    </ToggleButton><ToggleButton type=\"radio\" \n                            name=\"radio\" \n                            value=\"dinner\" \n                            checked={this.state.filterByTerm === \"dinner\"}\n                            onChange={this.handleTerm}\n                            variant='primary'>\n                    Dinner\n                    </ToggleButton>\n                    \n    \n                </ButtonGroup></div>\n        \n        //if search Field is set to anything other than category, it sets searchBar to a text input that will live update due to how the onChange attribute works\n        } else {\n            searchBar =\n            <div className='form-group row'>\n                <div className='col-xs-4'>\n                    <input placeholder='SearchTerm'\n                           value ={this.state.filterByTerm}\n                           className='inputmargin form-control'\n                           type='text'\n                           onChange={this.handleTerm}>\n                    </input>\n                </div>\n            </div>\n        }\n\n        return (\n            \n            <div className='container pt-4' role='main'>\n                <br></br>\n                {/* <h3 className='mt-3 ml-2 display-3'>Basil</h3> */}\n                <img src={logo} width=\"70\" alt=\"github.com/klayne1129\"/>\n                \n                <div className='container '>\n                    <h5>Search by:</h5>\n                    <ButtonGroup toggle className=\"\" >\n                        <ToggleButton type=\"radio\" \n                                name=\"radio\" \n                                defaultChecked \n                                value=\"all\" \n                                checked={this.state.filterByField === \"all\"}\n                                onChange={this.handleFilter}\n                                variant='dark'>\n                                    \n                        All\n                        </ToggleButton>\n                        <ToggleButton type=\"radio\" \n                                name=\"radio\" \n                                defaultChecked \n                                value=\"title\" \n                                checked={this.state.filterByField === \"title\"}\n                                onChange={this.handleFilter}\n                                variant='dark'>\n                        Name\n                        </ToggleButton>\n                        <ToggleButton type=\"radio\" \n                                name=\"radio\" \n                                defaultChecked \n                                value=\"ingredients\" \n                                checked={this.state.filterByField === \"ingredients\"}\n                                onChange={this.handleFilter}\n                                variant='dark'>\n                        Ingredients\n                        </ToggleButton>\n                        <ToggleButton type=\"radio\" \n                                name=\"radio\" \n                                defaultChecked \n                                value=\"mealType\" \n                                checked={this.state.filterByField === \"mealType\"}\n                                onChange={this.handleFilter}\n                                variant='dark'>\n                        Meal Type\n                        </ToggleButton>\n        \n                    </ButtonGroup>\n\n                    \n                    {searchBar}\n                    \n\n                \n                </div>\n                    \n                    \n                    \n                <CardColumns>{this.recipeList()}</CardColumns>\n                {/* <script src='script.js'></script> */}\n            </div>\n        )\n    }\n}\n\n\n\n\n\n\n\n\nexport default SearchComponent"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/KatieLayne/Documents/basil-app/basil-app/src/components/recipes/LoginComponent.jsx\";\nimport React, { Component } from 'react';\nimport AuthenticationService from './AuthenticationService.js';\nimport { Formik } from 'formik';\n\nclass LoginComponent extends Component {\n  constructor(props) {\n    super(props); // added state to component\n\n    this.handleKeyPress = e => {\n      if (e.key === \"Enter\") {\n        AuthenticationService.executeJWTAuthenticationService(this.state.username, this.state.password).then(response => {\n          AuthenticationService.registerSuccessfulLoginForJwt(this.state.username, response.data.token);\n          this.props.history.push(`/welcome/${this.state.username}`);\n        }).catch(() => {\n          this.setState({\n            showSuccessMessage: false\n          });\n          this.setState({\n            hasLoginFailed: true\n          });\n        });\n      }\n    };\n\n    this.state = {\n      username: 'basil',\n      password: '',\n      hasLoginFailed: false,\n      showSuccessMessage: false\n    }; //bind methods\n\n    this.handleChange = this.handleChange.bind(this);\n    this.loginClicked = this.loginClicked.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.handleKeyPress = this.handleKeyPress.bind(this);\n  } //whenever there is a change in a text element an event will handle it\n  //event updates the state \n\n\n  handleChange(event) {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  onSubmit() {\n    AuthenticationService.executeJWTAuthenticationService(this.state.username, this.state.password).then(response => {\n      AuthenticationService.registerSuccessfulLoginForJwt(this.state.username, response.data.token);\n      this.props.history.push(`/welcome/${this.state.username}`);\n    }).catch(() => {\n      this.setState({\n        showSuccessMessage: false\n      });\n      this.setState({\n        hasLoginFailed: true\n      });\n    });\n  }\n\n  loginClicked() {\n    //call AuthenticationService\n    //it sends the username and basic authentication token which will be entered on the screen\n    //bc from the screen it was mapped to the state\n    //from the state it is passed into executeBasicAuthenticationService method\n    //if request is successful, register successful login and pass to the welcom page\n    // if it fails, show authentication error \n    //UPDATE\n    //Call the JWTAuthenticationService, if succesful response comes back,\n    //register a token for the intercepter so token will be used on,\n    //every subsequent request\n    AuthenticationService.executeJWTAuthenticationService(this.state.username, this.state.password).then(response => {\n      AuthenticationService.registerSuccessfulLoginForJwt(this.state.username, response.data.token);\n      this.props.history.push(`/welcome/${this.state.username}`);\n    }).catch(() => {\n      this.setState({\n        showSuccessMessage: false\n      });\n      this.setState({\n        hasLoginFailed: true\n      });\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, \"Login\"), React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, this.state.hasLoginFailed && React.createElement(\"div\", {\n      className: \"alert alert-warning\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, \"Invalid Credentials\"), this.state.showSuccessMessage && React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, \"Login Successful\"), \"Username: \", React.createElement(\"input\", {\n      type: \"text\",\n      name: \"username\",\n      value: this.state.username,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }), \"Password: \", React.createElement(\"input\", {\n      type: \"password\",\n      name: \"password\",\n      value: this.state.password,\n      onChange: this.handleChange,\n      onKeyPress: this.handleKeyPress,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"submit\",\n      className: \"btn btn-success\",\n      onClick: this.loginClicked,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, \"Login\")));\n  }\n\n}\n\nexport default LoginComponent;","map":{"version":3,"sources":["/Users/KatieLayne/Documents/basil-app/basil-app/src/components/recipes/LoginComponent.jsx"],"names":["React","Component","AuthenticationService","Formik","LoginComponent","constructor","props","handleKeyPress","e","key","executeJWTAuthenticationService","state","username","password","then","response","registerSuccessfulLoginForJwt","data","token","history","push","catch","setState","showSuccessMessage","hasLoginFailed","handleChange","bind","loginClicked","onSubmit","event","target","name","value","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\nimport AuthenticationService from './AuthenticationService.js'\nimport { Formik } from 'formik'\n\n\n\nclass LoginComponent extends Component {\n    constructor(props) {\n        super(props)\n        // added state to component\n        this.state = {\n            username: 'basil',\n            password: '',\n            hasLoginFailed: false,\n            showSuccessMessage: false\n        \n        }\n        //bind methods\n        this.handleChange = this.handleChange.bind(this)\n        this.loginClicked = this.loginClicked.bind(this)\n        this.onSubmit = this.onSubmit.bind(this)\n        this.handleKeyPress = this.handleKeyPress.bind(this)\n        \n        }\n        //whenever there is a change in a text element an event will handle it\n        //event updates the state \n        handleChange(event) {\n            this.setState(\n                {\n                    [event.target.name]\n                        :event.target.value\n                }\n            )\n        }\n    \n        onSubmit(){\n        \n            AuthenticationService.executeJWTAuthenticationService(this.state.username, this.state.password)\n            .then((response) => {\n                AuthenticationService.registerSuccessfulLoginForJwt(this.state.username,response.data.token)\n                this.props.history.push(`/welcome/${this.state.username}`)\n            }).catch( () =>{\n                this.setState({showSuccessMessage:false})\n                this.setState({hasLoginFailed:true})\n            })\n    \n        \n        }\n        loginClicked(){\n           \n            //call AuthenticationService\n            //it sends the username and basic authentication token which will be entered on the screen\n            //bc from the screen it was mapped to the state\n            //from the state it is passed into executeBasicAuthenticationService method\n            //if request is successful, register successful login and pass to the welcom page\n            // if it fails, show authentication error \n\n            //UPDATE\n            //Call the JWTAuthenticationService, if succesful response comes back,\n            //register a token for the intercepter so token will be used on,\n            //every subsequent request\n            AuthenticationService\n            .executeJWTAuthenticationService(this.state.username, this.state.password)\n            .then((response) => {\n                AuthenticationService.registerSuccessfulLoginForJwt(this.state.username,response.data.token)\n                this.props.history.push(`/welcome/${this.state.username}`)\n            }).catch( () =>{\n                this.setState({showSuccessMessage:false})\n                this.setState({hasLoginFailed:true})\n            })\n        }\n\n    handleKeyPress = e => {\n        if (e.key === \"Enter\") {\n            AuthenticationService\n                .executeJWTAuthenticationService(this.state.username, this.state.password)\n                .then((response) => {\n                    AuthenticationService.registerSuccessfulLoginForJwt(this.state.username, response.data.token)\n                    this.props.history.push(`/welcome/${this.state.username}`)\n                }).catch(() => {\n                    this.setState({ showSuccessMessage: false })\n                    this.setState({ hasLoginFailed: true })\n                })\n        }\n    }\n\n    render() {\n        return (\n            <div >\n                <h1>Login</h1>\n               \n                <div className=\"container\">\n                \n                    \n                {/* give userfeedback based on credentials */}\n                {/* if true show message */}\n                {this.state.hasLoginFailed && <div className=\"alert alert-warning\">Invalid Credentials</div>}\n                {this.state.showSuccessMessage && <div>Login Successful</div>}\n            \n                {/* //value of buttons are tied back to the value of this state */}\n                Username: <input type=\"text\" name=\"username\" value={this.state.username} onChange={this.handleChange}/>\n\n                Password: <input type=\"password\" name=\"password\" value={this.state.password} onChange={this.handleChange} onKeyPress={this.handleKeyPress}/>\n            \n                <button type='submit' className=\"btn btn-success\" onClick={this.loginClicked}>Login</button>\n               \n                </div>\n                \n               \n            </div>\n        )\n    }\n\n    \n}\n\nexport default LoginComponent"]},"metadata":{},"sourceType":"module"}
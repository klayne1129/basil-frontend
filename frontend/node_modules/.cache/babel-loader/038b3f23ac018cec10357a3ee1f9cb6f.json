{"ast":null,"code":"var _jsxFileName = \"/Users/KatieLayne/Documents/basil-app/basil-app/src/components/recipes/ListRecipesComponent.jsx\";\nimport React, { Component } from 'react';\nimport RecipeDataService from '../../api/recipes/RecipeDataService.js';\nimport AuthenticationService from './AuthenticationService.js';\n\nclass ListRecipesComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      recipes: [],\n      message: null\n    };\n    this.updatrecipeClicked = this.updateRecipeClicked.bind(this);\n    this.viewRecipeClicked = this.viewRecipeClicked.bind(this);\n    this.deleteRecipeClicked = this.deleteRecipeClicked.bind(this);\n    this.refreshRecipes = this.refreshRecipes.bind(this);\n    this.addRecipeClicked = this.addRecipeClicked.bind(this);\n  } //dont call initial api in the constructor\n  //if you do the state doesn't reinitialize until the api is finished \n\n\n  componentDidMount() {\n    console.log(\"component did Mount\");\n    this.refreshRecipes();\n  }\n\n  refreshRecipes() {\n    //use the username by using authentication service\n    let username = AuthenticationService.getLoggedInUser();\n    RecipeDataService.retrieveAllRecipes(username).then(response => {\n      // console.log(response)\n      this.setState({\n        recipes: response.data\n      });\n    });\n  } // deletes recipe with username and id match, refreshes the recipe list\n\n\n  deleteRecipeClicked(id) {\n    let username = AuthenticationService.getLoggedInUser(); // console.log(id + \" \" + username)\n\n    RecipeDataService.deleteRecipe(username, id).then(response => {\n      this.setState({\n        message: `Deletion of recipe ${id} successful.`\n      });\n      this.refreshRecipes();\n    });\n  } // push to that new recipe page by id to add\n\n\n  addRecipeClicked(id) {\n    this.props.history.push(`/recipes/-1`);\n  } //ROUTE  /recipes/{$id}\n  //edit button clicked\n  // push to that specific recipe page by id to edit\n\n\n  updateRecipeClicked(id) {\n    console.log('update ' + id);\n    this.props.history.push(`/recipes/${id}`);\n  }\n\n  viewRecipeClicked(id) {\n    console.log('update ' + id);\n    this.props.history.push(`/view/${id}`);\n  } //Right now when the button is clicked it just wants to print the entire list page\n  //should redirect to a single recipe page and THEN print\n\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, \"My List of Recipes\"), this.state.message && React.createElement(\"div\", {\n      className: \"alert alert-success\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, this.state.message), React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(\"table\", {\n      className: \"table\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, \"Title\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, \"Directions\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, \"Ingredients\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, \"Notes\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, \"Meal Type\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, \"View\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, \"Edit\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, \"Delete\"))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, this.state.recipes.map(recipe => React.createElement(\"tr\", {\n      key: recipe.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, recipe.title), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, recipe.directions), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, recipe.ingredients), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, recipe.notes), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, recipe.mealType), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"btn btn-success\",\n      onClick: () => this.viewRecipeClicked(recipe.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, \"View\")), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"btn btn-success\",\n      onClick: () => this.updateRecipeClicked(recipe.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, \"Edit\")), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"btn btn-warning\",\n      onClick: () => this.deleteRecipeClicked(recipe.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, \"Delete\")))))), React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"btn btn-success\",\n      onClick: this.addRecipeClicked,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, \"Add\"))));\n  }\n\n}\n\nexport default ListRecipesComponent;","map":{"version":3,"sources":["/Users/KatieLayne/Documents/basil-app/basil-app/src/components/recipes/ListRecipesComponent.jsx"],"names":["React","Component","RecipeDataService","AuthenticationService","ListRecipesComponent","constructor","props","state","recipes","message","updatrecipeClicked","updateRecipeClicked","bind","viewRecipeClicked","deleteRecipeClicked","refreshRecipes","addRecipeClicked","componentDidMount","console","log","username","getLoggedInUser","retrieveAllRecipes","then","response","setState","data","id","deleteRecipe","history","push","render","map","recipe","title","directions","ingredients","notes","mealType"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\nimport RecipeDataService from '../../api/recipes/RecipeDataService.js'\nimport AuthenticationService from './AuthenticationService.js'\n\n\nclass ListRecipesComponent extends Component{\n    \n    constructor(props){\n        super(props)\n        this.state = {\n            recipes : [],\n            message: null\n        }\n        this.updatrecipeClicked = this.updateRecipeClicked.bind(this);\n        this.viewRecipeClicked = this.viewRecipeClicked.bind(this);\n        this.deleteRecipeClicked = this.deleteRecipeClicked.bind(this);\n        this.refreshRecipes = this.refreshRecipes.bind(this);\n        this.addRecipeClicked = this.addRecipeClicked.bind(this);\n    }\n\n    //dont call initial api in the constructor\n    //if you do the state doesn't reinitialize until the api is finished \n    componentDidMount() {\n\n        console.log(\"component did Mount\")\n        this.refreshRecipes();\n    }\n\n    refreshRecipes(){\n\n        //use the username by using authentication service\n        let username = AuthenticationService.getLoggedInUser()\n        RecipeDataService.retrieveAllRecipes(username)\n            .then(\n                response => {\n                    // console.log(response)\n                    this.setState({recipes : response.data})\n                }\n            )\n    }\n\n    // deletes recipe with username and id match, refreshes the recipe list\n    deleteRecipeClicked(id) {\n        let username = AuthenticationService.getLoggedInUser()\n        // console.log(id + \" \" + username)\n        RecipeDataService.deleteRecipe(username, id)\n        .then (\n            response => {\n                this.setState({message : `Deletion of recipe ${id} successful.`})\n                this.refreshRecipes()\n            }\n        )\n    }\n    // push to that new recipe page by id to add\n    addRecipeClicked(id) {\n        this.props.history.push(`/recipes/-1`)\n    }\n\n    //ROUTE  /recipes/{$id}\n    //edit button clicked\n    // push to that specific recipe page by id to edit\n    updateRecipeClicked(id) {\n        console.log('update ' + id)\n        this.props.history.push(`/recipes/${id}`)\n    }\n\n    viewRecipeClicked(id) {\n        console.log('update ' + id)\n        this.props.history.push(`/view/${id}`)\n    }\n\n    //Right now when the button is clicked it just wants to print the entire list page\n    //should redirect to a single recipe page and THEN print\n\n    \n\n    render() {\n        return  (   \n                     <div>\n                        <h1>My List of Recipes</h1>\n                        {this.state.message && <div className=\"alert alert-success\">{this.state.message}</div>}\n                        <div className=\"container\">\n                            <table className=\"table\">\n                                <thead>\n                                    <tr>\n                                        <th>Title</th>\n                                        <th>Directions</th>\n                                        <th>Ingredients</th>\n                                        <th>Notes</th>\n                                        <th>Meal Type</th>\n                                        <th>View</th>\n                                        <th>Edit</th>\n                                        <th>Delete</th>\n                                    \n\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {\n                                        this.state.recipes.map (\n                                            recipe =>\n\n                                        \n                                            <tr key={recipe.id}>\n                                                <td>{recipe.title}</td>\n                                                <td>{recipe.directions}</td>\n                                                <td>{recipe.ingredients}</td>\n                                                <td>{recipe.notes}</td>\n                                                <td>{recipe.mealType}</td>\n                                                <td><button className=\"btn btn-success\" onClick={() => this.viewRecipeClicked(recipe.id)} >View</button></td>\n                                                <td><button className=\"btn btn-success\" onClick={() => this.updateRecipeClicked(recipe.id)} >Edit</button></td>\n                                                <td><button className=\"btn btn-warning\" onClick={() => this.deleteRecipeClicked(recipe.id)} >Delete</button></td>\n                                                {/* <td><button className=\"btn btn-success\" value=\"Print\" onClick={() => this.printRecipeClicked()}>Print</button></td> */}\n                                            \n                                            </tr>\n                                        )\n                                    }\n\n                                </tbody>\n                            </table>\n                            <div className=\"row\">\n                                <button className='btn btn-success' onClick={this.addRecipeClicked}>Add</button>\n\n                            </div>\n                        </div>\n                    </div>\n                )\n    }\n}\n\nexport default ListRecipesComponent"]},"metadata":{},"sourceType":"module"}
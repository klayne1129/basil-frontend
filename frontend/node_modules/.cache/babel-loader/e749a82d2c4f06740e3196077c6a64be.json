{"ast":null,"code":"var _jsxFileName = \"/Users/KatieLayne/Documents/basil-app/basil-app/src/components/recipes/ListRecipesComponent.jsx\";\nimport React, { Component } from 'react';\nimport AuthenticationService from './AuthenticationService.js';\nimport RecipeDataService from '../../api/recipes/RecipeDataService.js';\nimport { Card, ListGroup, CardColumns, ButtonGroup, ToggleButton, Badge } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport logo from \"./logo2.png\";\n\nconst Recipe = props => React.createElement(Link, {\n  to: '/view/' + props.recipe.id,\n  className: \"link\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 11\n  },\n  __self: this\n}, React.createElement(Card, {\n  className: \"shadow grow\",\n  bg: \"light\",\n  style: {\n    marginTop: 10\n  },\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 12\n  },\n  __self: this\n}, React.createElement(Card.Img, {\n  variant: \"top\",\n  src: props.recipe.image,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 15\n  },\n  __self: this\n}), React.createElement(Card.Header, {\n  className: \"h5\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 17\n  },\n  __self: this\n}, props.recipe.title, \" \", React.createElement(Badge, {\n  variant: \"secondary\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 17\n  },\n  __self: this\n}, props.recipe.mealType)), React.createElement(ListGroup, {\n  variant: \"flush\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 18\n  },\n  __self: this\n})));\n\nclass ListRecipesComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      recipes: [],\n      filterByField: \"all\",\n      filterByTerm: ''\n    };\n    this.refreshRecipes = this.refreshRecipes.bind(this);\n    this.handleFilter = this.handleFilter.bind(this);\n    this.handleTerm = this.handleTerm.bind(this);\n  }\n\n  componentDidMount() {\n    console.log(\"component did Mount\");\n    this.refreshRecipes();\n  }\n\n  refreshRecipes() {\n    //use the username by using authentication service\n    let username = AuthenticationService.getLoggedInUser();\n    RecipeDataService.retrieveAllRecipes(username).then(response => {\n      // console.log(response)\n      this.setState({\n        recipes: response.data\n      });\n    });\n  } // model code\n  //This function looks at the state's filterByField and filterByTerm and then returns a list of Recipe objects based on the parameters\n\n\n  recipeList() {\n    let filterBy = this.state.filterByField;\n    let searchterm = this.state.filterByTerm.replace(/^\\s+|\\s+$/g, '');\n    return this.state.recipes.map(function (currentRecipe, i) {\n      if (filterBy === 'all' && (currentRecipe.title.toLowerCase().includes(searchterm.toLowerCase()) || currentRecipe.ingredients.toLowerCase().includes(searchterm.toLowerCase()) || currentRecipe.tags.toLowerCase().includes(searchterm.toLowerCase()) || currentRecipe.mealType.toLowerCase().includes(searchterm.toLowerCase())) || filterBy === 'title' && currentRecipe.title.toLowerCase().includes(searchterm.toLowerCase()) || filterBy === 'ingredients' && currentRecipe.ingredients.toLowerCase().includes(searchterm.toLowerCase()) || filterBy === 'tags' && currentRecipe.tags.toLowerCase().includes(searchterm.toLowerCase()) || filterBy === 'mealType' && currentRecipe.mealType.toLowerCase().includes(searchterm.toLowerCase())) return React.createElement(Recipe, {\n        recipe: currentRecipe,\n        key: i,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      });\n    });\n  } //This will handle any changes to the search category\n\n\n  handleFilter(e) {\n    this.setState({\n      filterByTerm: '',\n      filterByField: e.target.value\n    });\n  } //Handles any changes to search term\n\n\n  handleTerm(e) {\n    this.setState({\n      filterByTerm: e.target.value\n    });\n  }\n\n  render() {\n    //if search Field is set to anything other than category, it sets searchBar to a text input that will live update due to how the onChange attribute works\n    return React.createElement(\"div\", {\n      className: \"container pt-4\",\n      role: \"main\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      src: logo,\n      width: \"70\",\n      alt: \"github.com/klayne1129\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }), React.createElement(CardColumns, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, this.recipeList()));\n  }\n\n}\n\nexport default ListRecipesComponent; // import React, { Component } from 'react'\n// import RecipeDataService from '../../api/recipes/RecipeDataService.js'\n// import AuthenticationService from './AuthenticationService.js'\n// class ListRecipesComponent extends Component {\n//     constructor(props) {\n//         super(props)\n//         this.state = {\n//             recipes: [],\n//             message: null\n//         }\n//         this.updatrecipeClicked = this.updateRecipeClicked.bind(this);\n//         this.viewRecipeClicked = this.viewRecipeClicked.bind(this);\n//         this.deleteRecipeClicked = this.deleteRecipeClicked.bind(this);\n//         this.refreshRecipes = this.refreshRecipes.bind(this);\n//         this.addRecipeClicked = this.addRecipeClicked.bind(this);\n//     }\n//     //dont call initial api in the constructor\n//     //if you do the state doesn't reinitialize until the api is finished \n//     componentDidMount() {\n//         console.log(\"component did Mount\")\n//         this.refreshRecipes();\n//     }\n//     refreshRecipes() {\n//         //use the username by using authentication service\n//         let username = AuthenticationService.getLoggedInUser()\n//         RecipeDataService.retrieveAllRecipes(username)\n//             .then(\n//                 response => {\n//                     // console.log(response)\n//                     this.setState({ recipes: response.data })\n//                 }\n//             )\n//     }\n//     // deletes recipe with username and id match, refreshes the recipe list\n//     deleteRecipeClicked(id) {\n//         let username = AuthenticationService.getLoggedInUser()\n//         // console.log(id + \" \" + username)\n//         RecipeDataService.deleteRecipe(username, id)\n//             .then(\n//                 response => {\n//                     this.setState({ message: `Deletion of recipe ${id} successful.` })\n//                     this.refreshRecipes()\n//                 }\n//             )\n//     }\n//     // push to that new recipe page by id to add\n//     addRecipeClicked(id) {\n//         this.props.history.push(`/recipes/-1`)\n//     }\n//     //ROUTE  /recipes/{$id}\n//     //edit button clicked\n//     // push to that specific recipe page by id to edit\n//     updateRecipeClicked(id) {\n//         console.log('update ' + id)\n//         this.props.history.push(`/recipes/${id}`)\n//     }\n//     viewRecipeClicked(id) {\n//         console.log('update ' + id)\n//         this.props.history.push(`/view/${id}`)\n//     }\n//     //Right now when the button is clicked it just wants to print the entire list page\n//     //should redirect to a single recipe page and THEN print\n//     render() {\n//         return (\n//             <div>\n//                 <h1>My List of Recipes</h1>\n//                 {this.state.message && <div className=\"alert alert-success\">{this.state.message}</div>}\n//                 <div className=\"container\">\n//                     <table className=\"table\">\n//                         <thead>\n//                             <tr>\n//                                 <th>Title</th>\n//                                 <th>Notes</th>\n//                                 <th>Meal Type</th>\n//                                 <th>View</th>\n//                                 <th>Edit</th>\n//                                 <th>Delete</th>\n//                             </tr>\n//                         </thead>\n//                         <tbody>\n//                             {\n//                                 this.state.recipes.map(\n//                                     recipe =>\n//                                         <tr key={recipe.id}>\n//                                             <td>{recipe.title}</td>\n//                                             <td>{recipe.notes}</td>\n//                                             <td>{recipe.mealType}</td>\n//                                             <td><button className=\"btn btn-dark\" onClick={() => this.viewRecipeClicked(recipe.id)} >View</button></td>\n//                                             <td><button className=\"btn btn-primary\" onClick={() => this.updateRecipeClicked(recipe.id)} >Edit</button></td>\n//                                             <td><button className=\"btn btn-danger\" onClick={() => this.deleteRecipeClicked(recipe.id)} >Delete</button></td>\n//                                             {/* <td><button className=\"btn btn-success\" value=\"Print\" onClick={() => this.printRecipeClicked()}>Print</button></td> */}\n//                                         </tr>\n//                                 )\n//                             }\n//                         </tbody>\n//                     </table>\n//                     <div className=\"row\">\n//                         <button className='btn btn-dark' onClick={this.addRecipeClicked}>Add Recipe</button>\n//                     </div>\n//                 </div>\n//             </div>\n//         )\n//     }\n// }\n// export default ListRecipesComponent","map":{"version":3,"sources":["/Users/KatieLayne/Documents/basil-app/basil-app/src/components/recipes/ListRecipesComponent.jsx"],"names":["React","Component","AuthenticationService","RecipeDataService","Card","ListGroup","CardColumns","ButtonGroup","ToggleButton","Badge","Link","logo","Recipe","props","recipe","id","marginTop","image","title","mealType","ListRecipesComponent","constructor","state","recipes","filterByField","filterByTerm","refreshRecipes","bind","handleFilter","handleTerm","componentDidMount","console","log","username","getLoggedInUser","retrieveAllRecipes","then","response","setState","data","recipeList","filterBy","searchterm","replace","map","currentRecipe","i","toLowerCase","includes","ingredients","tags","e","target","value","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport AuthenticationService from './AuthenticationService.js'\nimport RecipeDataService from '../../api/recipes/RecipeDataService.js'\nimport {Card, ListGroup, CardColumns, ButtonGroup, ToggleButton, Badge} from 'react-bootstrap';\nimport {Link} from 'react-router-dom'\nimport logo from \"./logo2.png\"\n\n\nconst Recipe = props => (\n    \n    <Link to={'/view/' + props.recipe.id} className=\"link\">\n    <Card className=\"shadow grow\"bg='light' style={{ marginTop: 10}} >\n        \n        \n    <Card.Img variant='top'  src={props.recipe.image}></Card.Img>\n        \n               <Card.Header className='h5'>{props.recipe.title} <Badge variant='secondary'>{props.recipe.mealType}</Badge></Card.Header> \n                    <ListGroup variant=\"flush\" >\n                    \n                    </ListGroup>\n            \n        \n    </Card>\n    </Link>\n  \n\n)\n\nclass ListRecipesComponent extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            recipes: [],\n            filterByField: \"all\",\n            filterByTerm: ''\n        }\n        this.refreshRecipes = this.refreshRecipes.bind(this);\n        this.handleFilter = this.handleFilter.bind(this);\n        this.handleTerm = this.handleTerm.bind(this);\n    }\n\n    componentDidMount() {\n\n        console.log(\"component did Mount\")\n        this.refreshRecipes();\n    }\n\n    refreshRecipes(){\n\n        //use the username by using authentication service\n        let username = AuthenticationService.getLoggedInUser()\n        RecipeDataService.retrieveAllRecipes(username)\n            .then(\n                response => {\n                    // console.log(response)\n                    this.setState({recipes : response.data})\n                }\n            )\n    }\n    \n// model code\n\n//This function looks at the state's filterByField and filterByTerm and then returns a list of Recipe objects based on the parameters\nrecipeList() {\n    let filterBy = this.state.filterByField\n    let searchterm = this.state.filterByTerm.replace(/^\\s+|\\s+$/g, '') \n    return this.state.recipes.map(function(currentRecipe, i){\n\n\n        if ((filterBy === 'all' && (currentRecipe.title.toLowerCase().includes(searchterm.toLowerCase()) \n                                 || currentRecipe.ingredients.toLowerCase().includes(searchterm.toLowerCase())\n                                 || currentRecipe.tags.toLowerCase().includes(searchterm.toLowerCase())\n                                 || currentRecipe.mealType.toLowerCase().includes(searchterm.toLowerCase()))) \n            || (filterBy === 'title' && currentRecipe.title.toLowerCase().includes(searchterm.toLowerCase()))\n            || (filterBy === 'ingredients' && currentRecipe.ingredients.toLowerCase().includes(searchterm.toLowerCase()))\n            || (filterBy === 'tags' && currentRecipe.tags.toLowerCase().includes(searchterm.toLowerCase()))\n            || (filterBy === 'mealType' && currentRecipe.mealType.toLowerCase().includes(searchterm.toLowerCase())))\n        return <Recipe recipe={currentRecipe} key={i} />\n    });\n}\n//This will handle any changes to the search category\nhandleFilter(e) {\n    this.setState({\n        filterByTerm: '',\n        filterByField: e.target.value\n    })\n}\n//Handles any changes to search term\nhandleTerm(e) {\n    this.setState({\n        filterByTerm: e.target.value\n    })\n}\n\n\n    render() {\n        \n        \n        //if search Field is set to anything other than category, it sets searchBar to a text input that will live update due to how the onChange attribute works\n        \n\n        return (\n            \n            <div className='container pt-4' role='main'>\n                <br></br>\n                {/* <h3 className='mt-3 ml-2 display-3'>Basil</h3> */}\n                <img src={logo} width=\"70\" alt=\"github.com/klayne1129\"/>\n                \n                \n                    \n      \n                <CardColumns>{this.recipeList()}</CardColumns>\n                {/* <script src='script.js'></script> */}\n            </div>\n        )\n    }\n}\n\n\n\n\n\n\n\n\nexport default ListRecipesComponent\n\n\n\n\n\n\n\n\n\n// import React, { Component } from 'react'\n// import RecipeDataService from '../../api/recipes/RecipeDataService.js'\n// import AuthenticationService from './AuthenticationService.js'\n\n\n\n// class ListRecipesComponent extends Component {\n\n//     constructor(props) {\n//         super(props)\n//         this.state = {\n//             recipes: [],\n//             message: null\n//         }\n//         this.updatrecipeClicked = this.updateRecipeClicked.bind(this);\n//         this.viewRecipeClicked = this.viewRecipeClicked.bind(this);\n//         this.deleteRecipeClicked = this.deleteRecipeClicked.bind(this);\n//         this.refreshRecipes = this.refreshRecipes.bind(this);\n//         this.addRecipeClicked = this.addRecipeClicked.bind(this);\n//     }\n\n//     //dont call initial api in the constructor\n//     //if you do the state doesn't reinitialize until the api is finished \n//     componentDidMount() {\n\n//         console.log(\"component did Mount\")\n//         this.refreshRecipes();\n//     }\n\n//     refreshRecipes() {\n\n//         //use the username by using authentication service\n//         let username = AuthenticationService.getLoggedInUser()\n//         RecipeDataService.retrieveAllRecipes(username)\n//             .then(\n//                 response => {\n//                     // console.log(response)\n//                     this.setState({ recipes: response.data })\n//                 }\n//             )\n//     }\n\n//     // deletes recipe with username and id match, refreshes the recipe list\n//     deleteRecipeClicked(id) {\n//         let username = AuthenticationService.getLoggedInUser()\n//         // console.log(id + \" \" + username)\n//         RecipeDataService.deleteRecipe(username, id)\n//             .then(\n//                 response => {\n//                     this.setState({ message: `Deletion of recipe ${id} successful.` })\n//                     this.refreshRecipes()\n//                 }\n//             )\n//     }\n//     // push to that new recipe page by id to add\n//     addRecipeClicked(id) {\n//         this.props.history.push(`/recipes/-1`)\n//     }\n\n//     //ROUTE  /recipes/{$id}\n//     //edit button clicked\n//     // push to that specific recipe page by id to edit\n//     updateRecipeClicked(id) {\n//         console.log('update ' + id)\n//         this.props.history.push(`/recipes/${id}`)\n//     }\n\n//     viewRecipeClicked(id) {\n//         console.log('update ' + id)\n//         this.props.history.push(`/view/${id}`)\n//     }\n\n//     //Right now when the button is clicked it just wants to print the entire list page\n//     //should redirect to a single recipe page and THEN print\n\n\n\n//     render() {\n//         return (\n//             <div>\n//                 <h1>My List of Recipes</h1>\n//                 {this.state.message && <div className=\"alert alert-success\">{this.state.message}</div>}\n//                 <div className=\"container\">\n//                     <table className=\"table\">\n//                         <thead>\n//                             <tr>\n//                                 <th>Title</th>\n//                                 <th>Notes</th>\n//                                 <th>Meal Type</th>\n//                                 <th>View</th>\n//                                 <th>Edit</th>\n//                                 <th>Delete</th>\n\n\n//                             </tr>\n//                         </thead>\n//                         <tbody>\n//                             {\n//                                 this.state.recipes.map(\n//                                     recipe =>\n\n\n//                                         <tr key={recipe.id}>\n//                                             <td>{recipe.title}</td>\n//                                             <td>{recipe.notes}</td>\n//                                             <td>{recipe.mealType}</td>\n//                                             <td><button className=\"btn btn-dark\" onClick={() => this.viewRecipeClicked(recipe.id)} >View</button></td>\n//                                             <td><button className=\"btn btn-primary\" onClick={() => this.updateRecipeClicked(recipe.id)} >Edit</button></td>\n//                                             <td><button className=\"btn btn-danger\" onClick={() => this.deleteRecipeClicked(recipe.id)} >Delete</button></td>\n//                                             {/* <td><button className=\"btn btn-success\" value=\"Print\" onClick={() => this.printRecipeClicked()}>Print</button></td> */}\n\n//                                         </tr>\n//                                 )\n//                             }\n\n//                         </tbody>\n//                     </table>\n\n//                     <div className=\"row\">\n//                         <button className='btn btn-dark' onClick={this.addRecipeClicked}>Add Recipe</button>\n\n//                     </div>\n//                 </div>\n//             </div>\n//         )\n//     }\n// }\n\n// export default ListRecipesComponent"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import axios from 'axios';\n\nclass AuthenticationService {\n  // whenever a user logs in successfully, send that data to session storage\n  registerSuccessfulLogin(username, password) {\n    console.log(\"registered login\");\n    sessionStorage.setItem('authenticatedUser', username);\n    this.setupAxiosInterceptors();\n  } //when a user logs out the value from session storage is removed\n\n\n  logout() {\n    sessionStorage.removeItem('authenticatedUser');\n  } //checks to see if a user has logged in to app\n\n\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem('authenticatedUser');\n\n    if (user === null) {\n      return false;\n    }\n\n    return true;\n  }\n\n  getLoggedInUser() {\n    let user = sessionStorage.getItem('authenticatedUser');\n\n    if (user === null) {\n      return '';\n    }\n\n    return user;\n  } // adding an intercepter by creating a simple method that\n  //adds an authorization header to every request.\n  // you want to call this method at log in.\n\n\n  setupAxiosInterceptors() {\n    let username = \"basil\";\n    let password = \"basil\";\n    let basicAuthenticationHeader = 'Basic ' + window.btoa(username + \":\" + password);\n    axios.interceptors.request.use(config => {\n      if (this.isUserLoggedIn()) {\n        config.headers.authorization = basicAuthenticationHeader;\n      }\n\n      return config;\n    });\n  }\n\n} //for react components export the class directly\n//for helper services, export an instance of the class  as an object\n\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["/Users/KatieLayne/Documents/basil-app/basil-app/src/components/recipes/AuthenticationService.js"],"names":["axios","AuthenticationService","registerSuccessfulLogin","username","password","console","log","sessionStorage","setItem","setupAxiosInterceptors","logout","removeItem","isUserLoggedIn","user","getItem","getLoggedInUser","basicAuthenticationHeader","window","btoa","interceptors","request","use","config","headers","authorization"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AACA,MAAMC,qBAAN,CAA4B;AAExB;AACAC,EAAAA,uBAAuB,CAACC,QAAD,EAAWC,QAAX,EAAqB;AACxCC,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACAC,IAAAA,cAAc,CAACC,OAAf,CAAuB,mBAAvB,EAA4CL,QAA5C;AACA,SAAKM,sBAAL;AAEH,GARuB,CAUxB;;;AACAC,EAAAA,MAAM,GAAG;AACLH,IAAAA,cAAc,CAACI,UAAf,CAA0B,mBAA1B;AACH,GAbuB,CAexB;;;AACAC,EAAAA,cAAc,GAAG;AACb,QAAIC,IAAI,GAAGN,cAAc,CAACO,OAAf,CAAuB,mBAAvB,CAAX;;AACA,QAAID,IAAI,KAAI,IAAZ,EAAkB;AACd,aAAO,KAAP;AACH;;AACD,WAAO,IAAP;AACH;;AAEDE,EAAAA,eAAe,GAAG;AACd,QAAIF,IAAI,GAAGN,cAAc,CAACO,OAAf,CAAuB,mBAAvB,CAAX;;AACA,QAAID,IAAI,KAAI,IAAZ,EAAkB;AACd,aAAO,EAAP;AACH;;AACD,WAAOA,IAAP;AACH,GA9BuB,CA+B5B;AACA;AACA;;;AACIJ,EAAAA,sBAAsB,GAAG;AACrB,QAAIN,QAAQ,GAAG,OAAf;AACA,QAAIC,QAAQ,GAAG,OAAf;AACA,QAAIY,yBAAyB,GAAG,WAAUC,MAAM,CAACC,IAAP,CAAYf,QAAQ,GAAG,GAAX,GAAiBC,QAA7B,CAA1C;AAEAJ,IAAAA,KAAK,CAACmB,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACEC,MAAD,IAAY;AACR,UAAG,KAAKV,cAAL,EAAH,EAAyB;AACzBU,QAAAA,MAAM,CAACC,OAAP,CAAeC,aAAf,GAA+BR,yBAA/B;AACC;;AACD,aAAOM,MAAP;AACH,KANF;AAQH;;AA/CuB,C,CAkD5B;AACA;;;AACA,eAAe,IAAIrB,qBAAJ,EAAf","sourcesContent":["import axios from 'axios'\nclass AuthenticationService {\n\n    // whenever a user logs in successfully, send that data to session storage\n    registerSuccessfulLogin(username, password) {\n        console.log(\"registered login\")\n        sessionStorage.setItem('authenticatedUser', username)\n        this.setupAxiosInterceptors()\n        \n    }\n\n    //when a user logs out the value from session storage is removed\n    logout() {\n        sessionStorage.removeItem('authenticatedUser')\n    }\n\n    //checks to see if a user has logged in to app\n    isUserLoggedIn() {\n        let user = sessionStorage.getItem('authenticatedUser')\n        if (user=== null) {\n            return false\n        } \n        return true      \n    }\n\n    getLoggedInUser() {\n        let user = sessionStorage.getItem('authenticatedUser')\n        if (user=== null) {\n            return ''\n        } \n        return user\n    }\n// adding an intercepter by creating a simple method that\n//adds an authorization header to every request.\n// you want to call this method at log in.\n    setupAxiosInterceptors() {\n        let username = \"basil\"\n        let password = \"basil\"\n        let basicAuthenticationHeader = 'Basic '+ window.btoa(username + \":\" + password)\n        \n        axios.interceptors.request.use(\n         (config) => {\n             if(this.isUserLoggedIn()){\n             config.headers.authorization = basicAuthenticationHeader\n             }\n             return config\n         }\n        )\n    }\n}\n\n//for react components export the class directly\n//for helper services, export an instance of the class  as an object\nexport default new AuthenticationService()"]},"metadata":{},"sourceType":"module"}
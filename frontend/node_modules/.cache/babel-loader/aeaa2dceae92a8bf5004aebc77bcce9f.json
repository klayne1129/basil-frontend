{"ast":null,"code":"var _jsxFileName = \"/Users/KatieLayne/Documents/basil-app/basil-app/src/components/recipes/WelcomeComponent.jsx\";\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nclass WelcomeComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.handleSuccessfulResponse = this.handleSuccessfulResponse.bind(this);\n    this.handleError = this.handleError.bind(this);\n    this.state = {\n      welcomeMessage: '',\n      errorMessage: '',\n      username: this.props.match.params.name\n    };\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }, \"Welcome to Basil!\"), React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, \"Welcome \", this.username, \". You can manage your recipes \", React.createElement(Link, {\n      to: \"/recipes\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, \"here\"), \".\"), React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, this.state.welcomeMessage));\n  } // call the promise method. Once called THEN define what should be done with a\n  // successful response\n  // retrieveWelcomeMessage() {\n  //     // HelloWorldService.executeHelloWorldService()\n  //     // .then( response => this.handleSuccessfulResponse(response) )\n  //     // HelloWorldService.executeHelloWorldBeanService()\n  //     // .then( response => this.handleSuccessfulResponse(response) )\n  //     HelloWorldService.executeHelloWorldPathVariableService(this.props.match.params.name)\n  //     .then( response => this.handleSuccessfulResponse(response) )\n  //     .catch( error => this.handleError(error))\n  // }\n\n\n  handleSuccessfulResponse(response) {\n    this.setState({\n      welcomeMessage: response.data.message\n    });\n  } // First checks if there is an error message\n  // if there is an error message, it appends it\n  // then it checks if there is something in the response data (not null)\n  // if there is a response you append it to the error message.\n  // prevents from crashing if you have an error that has no response \n  // (network error, authorization issues)\n\n\n  handleError(error) {\n    console.log(error.response);\n    let errorMessage = '';\n\n    if (errorMessage) {\n      errorMessage += error.message;\n    }\n\n    if (error.response && error.response.data) {\n      errorMessage += error.response.data.message;\n    }\n\n    this.setState({\n      errorMessage: errorMessage\n    });\n  }\n\n}\n\nexport default WelcomeComponent;","map":{"version":3,"sources":["/Users/KatieLayne/Documents/basil-app/basil-app/src/components/recipes/WelcomeComponent.jsx"],"names":["React","Component","Link","WelcomeComponent","constructor","props","handleSuccessfulResponse","bind","handleError","state","welcomeMessage","errorMessage","username","match","params","name","render","response","setState","data","message","error","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,IAAR,QAAmB,kBAAnB;;AAIA,MAAMC,gBAAN,SAA+BF,SAA/B,CAAyC;AAErCG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,wBAAL,GAAgC,KAAKA,wBAAL,CAA8BC,IAA9B,CAAmC,IAAnC,CAAhC;AACA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBD,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAKE,KAAL,GAAa;AACTC,MAAAA,cAAc,EAAG,EADR;AAETC,MAAAA,YAAY,EAAG,EAFN;AAGTC,MAAAA,QAAQ,EAAE,KAAKP,KAAL,CAAWQ,KAAX,CAAiBC,MAAjB,CAAwBC;AAHzB,KAAb;AAMH;;AACDC,EAAAA,MAAM,GAAG;AACL,WACa,0CACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADH,EAEG;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACa,KAAKJ,QADlB,oCAEgC,oBAAC,IAAD;AAAM,MAAA,EAAE,EAAC,UAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFhC,MAFH,EAWG;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKH,KAAL,CAAWC,cADhB,CAXH,CADb;AAsBH,GApCoC,CAsCrC;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;;;AAEAJ,EAAAA,wBAAwB,CAACW,QAAD,EAAU;AAC9B,SAAKC,QAAL,CAAc;AAACR,MAAAA,cAAc,EAAGO,QAAQ,CAACE,IAAT,CAAcC;AAAhC,KAAd;AACH,GAtDoC,CAyDrC;AACA;AACA;AACA;AACA;AACA;;;AAEAZ,EAAAA,WAAW,CAACa,KAAD,EAAO;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACJ,QAAlB;AACA,QAAIN,YAAY,GAAG,EAAnB;;AACA,QAAIA,YAAJ,EAAiB;AACbA,MAAAA,YAAY,IAAIU,KAAK,CAACD,OAAtB;AACH;;AAED,QAAIC,KAAK,CAACJ,QAAN,IAAkBI,KAAK,CAACJ,QAAN,CAAeE,IAArC,EAA0C;AACtCR,MAAAA,YAAY,IAAIU,KAAK,CAACJ,QAAN,CAAeE,IAAf,CAAoBC,OAApC;AACH;;AACD,SAAKF,QAAL,CAAc;AAACP,MAAAA,YAAY,EAAGA;AAAhB,KAAd;AACH;;AA3EoC;;AAgFzC,eAAeR,gBAAf","sourcesContent":["import React, {Component} from 'react'\nimport {Link} from 'react-router-dom'\n\n\n\nclass WelcomeComponent extends Component {\n\n    constructor(props) {\n        super(props)\n        this.handleSuccessfulResponse = this.handleSuccessfulResponse.bind(this)\n        this.handleError = this.handleError.bind(this)\n        this.state = {\n            welcomeMessage : '',\n            errorMessage : '',\n            username: this.props.match.params.name\n            \n        }\n    }\n    render() {\n        return  (\n                     <>\n                        <h1>Welcome to Basil!</h1>\n                        <div className=\"container\">\n                            Welcome {this.username}. \n                            You can manage your recipes <Link to=\"/recipes\">here</Link>.\n                        </div>\n                        {/* <div className=\"container\">\n                            Click here for a customized welcome message. \n                            <button onClick={this.retrieveWelcomeMessage}\n                                 className=\"btn btn-success\">Welcome Message</button>\n                        </div> */}\n                        <div className=\"container\">\n                            {this.state.welcomeMessage}\n                        </div>\n                        {/* errors */}\n                        {/* <div className=\"container\">\n                            {this.state.errorMessage}\n                        </div> */}\n\n                    </>\n        )  \n    }\n\n    // call the promise method. Once called THEN define what should be done with a\n    // successful response\n    // retrieveWelcomeMessage() {\n    //     // HelloWorldService.executeHelloWorldService()\n    //     // .then( response => this.handleSuccessfulResponse(response) )\n\n    //     // HelloWorldService.executeHelloWorldBeanService()\n    //     // .then( response => this.handleSuccessfulResponse(response) )\n\n    //     HelloWorldService.executeHelloWorldPathVariableService(this.props.match.params.name)\n    //     .then( response => this.handleSuccessfulResponse(response) )\n    //     .catch( error => this.handleError(error))\n    // }\n\n    handleSuccessfulResponse(response){\n        this.setState({welcomeMessage : response.data.message})   \n    }\n\n\n    // First checks if there is an error message\n    // if there is an error message, it appends it\n    // then it checks if there is something in the response data (not null)\n    // if there is a response you append it to the error message.\n    // prevents from crashing if you have an error that has no response \n    // (network error, authorization issues)\n\n    handleError(error){\n        console.log(error.response)\n        let errorMessage = '';\n        if (errorMessage){\n            errorMessage += error.message\n        }\n\n        if (error.response && error.response.data){\n            errorMessage += error.response.data.message\n        }\n        this.setState({errorMessage : errorMessage})   \n    }\n\n}\n\n\nexport default WelcomeComponent"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/KatieLayne/Documents/basil-app/basil-app/src/components/recipes/WelcomeComponent.jsx\";\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport HelloWorldService from '../../api/recipes/HelloWorldService.js';\n\nclass WelcomeComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.retrieveWelcomeMessage = this.retrieveWelcomeMessage.bind(this);\n    this.handleSuccessfulResponse = this.handleSuccessfulResponse.bind(this);\n    this.handleError = this.handleError.bind(this);\n    this.state = {\n      welcomeMessage: '',\n      errorMessage: ''\n    };\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    }, \"Welcome!\"), React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }, \"Welcome \", this.props.match.params.name, \". You can manage your recipes \", React.createElement(Link, {\n      to: \"/recipes\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, \"here\"), \".\"), React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, \"Click here for a customized welcome message.\", React.createElement(\"button\", {\n      onClick: this.retrieveWelcomeMessage,\n      className: \"btn btn-success\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, \"Welcome Message\")), React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, this.state.welcomeMessage));\n  } // call the promise method. Once called THEN define what should be done with a\n  // successful response\n\n\n  retrieveWelcomeMessage() {\n    // HelloWorldService.executeHelloWorldService()\n    // .then( response => this.handleSuccessfulResponse(response) )\n    // HelloWorldService.executeHelloWorldBeanService()\n    // .then( response => this.handleSuccessfulResponse(response) )\n    HelloWorldService.executeHelloWorldPathVariableService(this.props.match.params.name).then(response => this.handleSuccessfulResponse(response)).catch(error => this.handleError(error));\n  }\n\n  handleSuccessfulResponse(response) {\n    this.setState({\n      welcomeMessage: response.data.message\n    });\n  } // First checks if there is an error message\n  // if there is an error message, it appends it\n  // then it checks if there is something in the response data (not null)\n  // if there is a response you append it to the error message.\n  // prevents from crashing if you have an error that has no response \n  // (network error, authorization issues)\n\n\n  handleError(error) {\n    console.log(error.response);\n    let errorMessage = '';\n\n    if (errormessage) {\n      errorMessage += error.message;\n    }\n\n    if (error.response && error.response.data) {\n      errorMessage += error.response.data.message;\n    }\n\n    this.setState({\n      errorMessage: errorMessage\n    });\n  }\n\n}\n\nexport default WelcomeComponent;","map":{"version":3,"sources":["/Users/KatieLayne/Documents/basil-app/basil-app/src/components/recipes/WelcomeComponent.jsx"],"names":["React","Component","Link","HelloWorldService","WelcomeComponent","constructor","props","retrieveWelcomeMessage","bind","handleSuccessfulResponse","handleError","state","welcomeMessage","errorMessage","render","match","params","name","executeHelloWorldPathVariableService","then","response","catch","error","setState","data","message","console","log","errormessage"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,IAAR,QAAmB,kBAAnB;AACA,OAAOC,iBAAP,MAA8B,wCAA9B;;AAGA,MAAMC,gBAAN,SAA+BH,SAA/B,CAAyC;AAErCI,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,sBAAL,GAA8B,KAAKA,sBAAL,CAA4BC,IAA5B,CAAiC,IAAjC,CAA9B;AACA,SAAKC,wBAAL,GAAgC,KAAKA,wBAAL,CAA8BD,IAA9B,CAAmC,IAAnC,CAAhC;AACA,SAAKE,WAAL,GAAmB,KAAKA,WAAL,CAAkBF,IAAlB,CAAuB,IAAvB,CAAnB;AACA,SAAKG,KAAL,GAAa;AACTC,MAAAA,cAAc,EAAG,EADR;AAETC,MAAAA,YAAY,EAAG;AAFN,KAAb;AAIH;;AACDC,EAAAA,MAAM,GAAG;AACL,WACa,0CACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADH,EAEG;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACa,KAAKR,KAAL,CAAWS,KAAX,CAAiBC,MAAjB,CAAwBC,IADrC,oCAEgC,oBAAC,IAAD;AAAM,MAAA,EAAE,EAAC,UAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFhC,MAFH,EAMG;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uDAEI;AAAQ,MAAA,OAAO,EAAE,KAAKV,sBAAtB;AACK,MAAA,SAAS,EAAC,iBADf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAFJ,CANH,EAWG;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKI,KAAL,CAAWC,cADhB,CAXH,CADb;AAsBH,GAnCoC,CAqCrC;AACA;;;AACAL,EAAAA,sBAAsB,GAAG;AACrB;AACA;AAEA;AACA;AAEAJ,IAAAA,iBAAiB,CAACe,oCAAlB,CAAuD,KAAKZ,KAAL,CAAWS,KAAX,CAAiBC,MAAjB,CAAwBC,IAA/E,EACCE,IADD,CACOC,QAAQ,IAAI,KAAKX,wBAAL,CAA8BW,QAA9B,CADnB,EAECC,KAFD,CAEQC,KAAK,IAAI,KAAKZ,WAAL,CAAiBY,KAAjB,CAFjB;AAGH;;AAEDb,EAAAA,wBAAwB,CAACW,QAAD,EAAU;AAC9B,SAAKG,QAAL,CAAc;AAACX,MAAAA,cAAc,EAAGQ,QAAQ,CAACI,IAAT,CAAcC;AAAhC,KAAd;AACH,GArDoC,CAwDrC;AACA;AACA;AACA;AACA;AACA;;;AAEAf,EAAAA,WAAW,CAACY,KAAD,EAAO;AACdI,IAAAA,OAAO,CAACC,GAAR,CAAYL,KAAK,CAACF,QAAlB;AACA,QAAIP,YAAY,GAAG,EAAnB;;AACA,QAAIe,YAAJ,EAAiB;AACbf,MAAAA,YAAY,IAAIS,KAAK,CAACG,OAAtB;AACH;;AAED,QAAIH,KAAK,CAACF,QAAN,IAAkBE,KAAK,CAACF,QAAN,CAAeI,IAArC,EAA0C;AACtCX,MAAAA,YAAY,IAAIS,KAAK,CAACF,QAAN,CAAeI,IAAf,CAAoBC,OAApC;AACH;;AACD,SAAKF,QAAL,CAAc;AAACV,MAAAA,YAAY,EAAGA;AAAhB,KAAd;AACH;;AA1EoC;;AA+EzC,eAAeT,gBAAf","sourcesContent":["import React, {Component} from 'react'\nimport {Link} from 'react-router-dom'\nimport HelloWorldService from '../../api/recipes/HelloWorldService.js'\n\n\nclass WelcomeComponent extends Component {\n\n    constructor(props) {\n        super(props)\n        this.retrieveWelcomeMessage = this.retrieveWelcomeMessage.bind(this)\n        this.handleSuccessfulResponse = this.handleSuccessfulResponse.bind(this)\n        this.handleError = this.handleError .bind(this)\n        this.state = {\n            welcomeMessage : '',\n            errorMessage : ''\n        }\n    }\n    render() {\n        return  (\n                     <>\n                        <h1>Welcome!</h1>\n                        <div className=\"container\">\n                            Welcome {this.props.match.params.name}. \n                            You can manage your recipes <Link to=\"/recipes\">here</Link>.\n                        </div>\n                        <div className=\"container\">\n                            Click here for a customized welcome message. \n                            <button onClick={this.retrieveWelcomeMessage}\n                                 className=\"btn btn-success\">Welcome Message</button>\n                        </div>\n                        <div className=\"container\">\n                            {this.state.welcomeMessage}\n                        </div>\n                        {/* errors */}\n                        {/* <div className=\"container\">\n                            {this.state.errorMessage}\n                        </div> */}\n\n                    </>\n        )  \n    }\n\n    // call the promise method. Once called THEN define what should be done with a\n    // successful response\n    retrieveWelcomeMessage() {\n        // HelloWorldService.executeHelloWorldService()\n        // .then( response => this.handleSuccessfulResponse(response) )\n\n        // HelloWorldService.executeHelloWorldBeanService()\n        // .then( response => this.handleSuccessfulResponse(response) )\n\n        HelloWorldService.executeHelloWorldPathVariableService(this.props.match.params.name)\n        .then( response => this.handleSuccessfulResponse(response) )\n        .catch( error => this.handleError(error))\n    }\n\n    handleSuccessfulResponse(response){\n        this.setState({welcomeMessage : response.data.message})   \n    }\n\n\n    // First checks if there is an error message\n    // if there is an error message, it appends it\n    // then it checks if there is something in the response data (not null)\n    // if there is a response you append it to the error message.\n    // prevents from crashing if you have an error that has no response \n    // (network error, authorization issues)\n\n    handleError(error){\n        console.log(error.response)\n        let errorMessage = '';\n        if (errormessage){\n            errorMessage += error.message\n        }\n\n        if (error.response && error.response.data){\n            errorMessage += error.response.data.message\n        }\n        this.setState({errorMessage : errorMessage})   \n    }\n\n}\n\n\nexport default WelcomeComponent"]},"metadata":{},"sourceType":"module"}
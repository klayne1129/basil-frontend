{"ast":null,"code":"var _jsxFileName = \"/Users/KatieLayne/Documents/basil-app/basil-app/src/components/recipes/RecipeComponent.jsx\";\nimport React, { Component } from 'react';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport RecipeDataService from '../../api/recipes/RecipeDataService.js';\nimport AuthenticationService from './AuthenticationService.js';\n\nclass RecipeComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      id: this.props.match.params.id,\n      title: '',\n      directions: '',\n      ingredients: '',\n      notes: '',\n      mealType: 'selectOne',\n      image: '',\n      tags: ''\n    }; // this.onChangeImage = this.onChangeImage.bind(this);\n\n    this.onSubmit = this.onSubmit.bind(this);\n    this.validate = this.validate.bind(this);\n  } //call api's in this function\n  //Get specific recipe using usernamme and Id\n  //then update the object\n\n\n  componentDidMount() {\n    if (this.state.id === -1) {\n      return;\n    }\n\n    let username = AuthenticationService.getLoggedInUser();\n    RecipeDataService.retrieveRecipe(username, this.state.id).then(response => this.setState({\n      title: response.data.title,\n      directions: response.data.directions,\n      ingredients: response.data.ingredients,\n      notes: response.data.notes,\n      mealType: response.data.mealType,\n      image: response.data.image,\n      tags: response.data.tags\n    }));\n  } // if no value present 'enter blank'\n  // custom error message using errorMessage props\n  //errororMessage below unde render()\n\n\n  validate(values) {\n    let errors = {};\n\n    if (!values.title) {\n      errors.title = 'Enter title';\n    } else if (values.title.length < 2) {\n      errors.title = 'Title must be at least 2 characters in length';\n    }\n\n    if (!values.directions) {\n      errors.directions = 'Enter directions';\n    } else if (values.directions.length < 5) {\n      errors.directions = 'Directions must be at least 5 characters in length';\n    }\n\n    if (!values.ingredients) {\n      errors.ingredients = 'Enter ingredients';\n    } else if (values.ingredients.length < 2) {\n      errors.ingredients = 'Ingredients must be at least 2 characters in length';\n    }\n\n    if (values.mealType === \"selectOne\") {\n      errors.mealType = 'Select a meal type';\n    }\n\n    return errors;\n  } // onChangeImage(e) {\n  //     this.setState({image: e.target.value})\n  //   }\n  //if successfuly updated redirect to list recipes page \n\n\n  onSubmit(values) {\n    let username = AuthenticationService.getLoggedInUser();\n    let recipe = {\n      id: this.state.id,\n      title: values.title,\n      directions: values.directions,\n      ingredients: values.ingredients,\n      notes: values.notes,\n      mealType: values.mealType,\n      image: values.image,\n      tags: values.tags\n    };\n\n    if (this.state.id === -1) {\n      RecipeDataService.createRecipe(username, recipe).then(() => this.props.history.push(`/recipes`));\n    } else {\n      RecipeDataService.updateRecipe(username, this.state.id, recipe).then(() => this.props.history.push(`/recipes`));\n    }\n  }\n\n  render() {\n    //destructuring \n    let {\n      title,\n      directions,\n      ingredients,\n      notes,\n      mealType,\n      image,\n      tags\n    } = this.state;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, \"My Recipe\"), React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(Formik // usually you would need to list initial values as key value pairs\n    // but if the key is the same as the value you only have to \n    // list the value (name, directions, ingredients)\n    , {\n      initialValues: {\n        title,\n        directions,\n        ingredients,\n        notes,\n        mealType,\n        image,\n        tags\n      } //sends ErrorMessages when validation fails only whens button clicked\n      //form only submited if validation passed \n      //enable reinitialization on formic or it will\n      //not update initial values, default is false\n      ,\n      onSubmit: this.onSubmit,\n      validateOnChange: false,\n      validateonBlur: false,\n      validate: this.validate,\n      enableReinitialize: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, props => React.createElement(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, React.createElement(ErrorMessage, {\n      name: \"title\",\n      component: \"div\",\n      className: \"alert alert-warning\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }), React.createElement(ErrorMessage, {\n      name: \"directions\",\n      component: \"div\",\n      className: \"alert alert-warning\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }), React.createElement(ErrorMessage, {\n      name: \"ingredients\",\n      component: \"div\",\n      className: \"alert alert-warning\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }), React.createElement(ErrorMessage, {\n      name: \"mealType\",\n      component: \"div\",\n      className: \"alert alert-warning\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }), React.createElement(\"fieldset\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, \"Title\"), React.createElement(Field, {\n      className: \"form-control\",\n      type: \"text\",\n      name: \"title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    })), React.createElement(\"fieldset\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, \"Directions\"), React.createElement(Field, {\n      as: \"textarea\",\n      className: \"form-control\",\n      type: \"text\",\n      name: \"directions\",\n      id: \"textBox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, \"Please press enter after each step except the last step. Each step should be on it's own line.\")), React.createElement(\"fieldset\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, \"Ingredients\"), React.createElement(Field, {\n      as: \"textarea\",\n      className: \"form-control\",\n      type: \"text\",\n      name: \"ingredients\",\n      id: \"textBox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, \"Please press enter after each ingredient except the last one. Each ingredient should be on it's own line.\")), React.createElement(\"fieldset\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, \"Notes (Optional)\"), React.createElement(Field, {\n      className: \"form-control\",\n      type: \"text\",\n      name: \"notes\",\n      id: \"textBox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    })), React.createElement(\"fieldset\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, \"Meal Type\"), React.createElement(Field, {\n      as: \"select\",\n      name: \"mealType\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      selected: true,\n      value: \"selectOne\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, \"Select One\"), React.createElement(\"option\", {\n      value: \"breakfast\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, \"Breakfast\"), React.createElement(\"option\", {\n      value: \"lunch\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, \"Lunch\"), React.createElement(\"option\", {\n      value: \"dinner\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, \"Dinner\"), React.createElement(\"option\", {\n      value: \"snack\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, \"Snack\"), React.createElement(\"option\", {\n      value: \"dessert\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, \"Dessert\"))), React.createElement(\"fieldset\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, \"Tags (Optional)\"), React.createElement(Field, {\n      className: \"form-control\",\n      type: \"text\",\n      name: \"tags\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, \"Please seperate each tag with a comma.\")), React.createElement(\"div\", {\n      className: \"col-md-6\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"form-group files color\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, \"Upload Your File \"), React.createElement(\"input\", {\n      type: \"file\",\n      className: \"form-control\",\n      name: \"file\",\n      onChange: this.onFileChangeHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }))), React.createElement(\"button\", {\n      type: \"submit\",\n      className: \"btn btn-success\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, \"Save\")))));\n  }\n\n}\n\nexport default RecipeComponent;","map":{"version":3,"sources":["/Users/KatieLayne/Documents/basil-app/basil-app/src/components/recipes/RecipeComponent.jsx"],"names":["React","Component","Formik","Form","Field","ErrorMessage","RecipeDataService","AuthenticationService","RecipeComponent","constructor","props","state","id","match","params","title","directions","ingredients","notes","mealType","image","tags","onSubmit","bind","validate","componentDidMount","username","getLoggedInUser","retrieveRecipe","then","response","setState","data","values","errors","length","recipe","createRecipe","history","push","updateRecipe","render","onFileChangeHandler"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\n\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport RecipeDataService from '../../api/recipes/RecipeDataService.js'\nimport AuthenticationService from './AuthenticationService.js'\n\n\n\n\nclass RecipeComponent extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            id: this.props.match.params.id,\n            title: '',\n            directions: '',\n            ingredients: '',\n            notes: '',\n            mealType: 'selectOne',\n            image: '',\n            tags: ''\n        }\n        // this.onChangeImage = this.onChangeImage.bind(this);\n        this.onSubmit = this.onSubmit.bind(this)\n        this.validate = this.validate.bind(this)\n       \n\n    }\n    //call api's in this function\n    //Get specific recipe using usernamme and Id\n    //then update the object\n    componentDidMount() {\n\n        if (this.state.id === -1) {\n            return\n        }\n\n        let username = AuthenticationService.getLoggedInUser()\n\n        RecipeDataService.retrieveRecipe(username, this.state.id)\n            .then(response => this.setState({\n                title: response.data.title,\n                directions: response.data.directions,\n                ingredients: response.data.ingredients,\n                notes: response.data.notes,\n                mealType: response.data.mealType,\n                image: response.data.image,\n                tags: response.data.tags\n            }))\n    }\n\n    \n\n    // if no value present 'enter blank'\n    // custom error message using errorMessage props\n    //errororMessage below unde render()\n\n    validate(values) {\n        let errors = {}\n        if (!values.title) {\n            errors.title = 'Enter title'\n        } else if (values.title.length < 2) {\n            errors.title = 'Title must be at least 2 characters in length'\n        }\n\n        if (!values.directions) {\n            errors.directions = 'Enter directions'\n        } else if (values.directions.length < 5) {\n            errors.directions = 'Directions must be at least 5 characters in length'\n        }\n\n        if (!values.ingredients) {\n            errors.ingredients = 'Enter ingredients'\n        } else if (values.ingredients.length < 2) {\n            errors.ingredients = 'Ingredients must be at least 2 characters in length'\n        }\n\n        if (values.mealType === \"selectOne\") {\n            errors.mealType = 'Select a meal type'\n        } \n\n        return errors\n    }\n\n    // onChangeImage(e) {\n    //     this.setState({image: e.target.value})\n    //   }\n\n    //if successfuly updated redirect to list recipes page \n    onSubmit(values) {\n\n        let username = AuthenticationService.getLoggedInUser()\n\n        let recipe = {\n            id: this.state.id,\n            title: values.title,\n            directions: values.directions,\n            ingredients: values.ingredients,\n            notes: values.notes,\n            mealType: values.mealType,\n            image: values.image,\n            tags: values.tags\n        }\n\n        if (this.state.id === -1) {\n            RecipeDataService.createRecipe(username, recipe)\n                .then(() => this.props.history.push(`/recipes`))\n\n        } else {\n            RecipeDataService.updateRecipe(username, this.state.id, recipe)\n                .then(() => this.props.history.push(`/recipes`))\n        }\n\n    }\n\n    render() {\n        //destructuring \n        let { title, directions, ingredients, notes, mealType, image, tags} = this.state\n\n        return (\n\n            <div>\n                <h1>My Recipe</h1>\n                <div className='container'>\n\n                    {/* defining a method that accepts props as input \n                        and returns the html of the form */}\n                    <Formik\n\n                        // usually you would need to list initial values as key value pairs\n                        // but if the key is the same as the value you only have to \n                        // list the value (name, directions, ingredients)\n                        initialValues={{ title, directions, ingredients, notes, mealType, image, tags}}\n\n                        //sends ErrorMessages when validation fails only whens button clicked\n                        //form only submited if validation passed \n                        //enable reinitialization on formic or it will\n                        //not update initial values, default is false\n                        onSubmit={this.onSubmit}\n                        validateOnChange={false}\n                        validateonBlur={false}\n                        validate={this.validate}\n                        enableReinitialize={true}\n                        >\n                        {\n                            (props) => (\n                                <Form>\n\n                                    <ErrorMessage name='title' component='div' className='alert alert-warning' />\n                                    <ErrorMessage name='directions' component='div' className='alert alert-warning' />\n                                    <ErrorMessage name='ingredients' component='div' className='alert alert-warning' />\n                                    <ErrorMessage name='mealType' component='div' className='alert alert-warning' />\n\n                                    <fieldset className='form-group'>\n                                        <label>Title</label>\n                                        <Field className='form-control' type='text' name='title' />\n                                    </fieldset>\n\n                                    <fieldset className='form-group'>\n                                        <label>Directions</label>\n                                        <Field as='textarea' className='form-control' type='text' name='directions' id='textBox' />\n                                        <p>Please press enter after each step except the last step. Each step should be on it's own line.</p>\n                                    </fieldset>\n\n                                    <fieldset className='form-group'>\n                                        <label>Ingredients</label>\n                                        <Field as='textarea' className='form-control' type='text' name='ingredients' id='textBox'/>\n                                        <p>Please press enter after each ingredient except the last one. Each ingredient should be on it's own line.</p>\n                                    </fieldset>\n\n                                    <fieldset className='form-group'>\n                                        <label>Notes (Optional)</label>\n                                        <Field className='form-control' type='text' name='notes' id='textBox'/>\n                                    </fieldset>\n \n                                    <fieldset className='form-group'>\n                                        <label>Meal Type</label>\n                                            <Field as='select' name='mealType'>\n                                                <option selected value='selectOne'>Select One</option>\n                                                <option value='breakfast'>Breakfast</option>\n                                                <option value='lunch'>Lunch</option>\n                                                <option value='dinner'>Dinner</option>\n                                                <option value='snack'>Snack</option>\n                                                <option value='dessert'>Dessert</option>\n                                             </Field>\n                                    </fieldset>\n\n                                    <fieldset className='form-group'>\n                                        <label>Tags (Optional)</label>\n                                        <Field className='form-control' type='text' name='tags' />\n                                        <p>Please seperate each tag with a comma.</p>\n                                    </fieldset>\n\n                                    {/* <fieldset className=\"form-group\">\n                                        <label>Image URL (Optional)</label>\n                                        <Field type=\"text\" className=\"form-control\" name='image'/>\n                                    </fieldset> */}\n                                    <div className=\"col-md-6\">\n                                        <div className=\"form-group files color\">\n                                            <label>Upload Your File </label>\n                                            <input type=\"file\" className=\"form-control\" name=\"file\" onChange={this.onFileChangeHandler} />\n                                        </div>\n                                    </div>\n\n                                    <button type=\"submit\" className='btn btn-success'>Save</button>\n\n                                </Form>\n                            )\n                        }\n                    </Formik>\n\n                </div>\n\n            </div>\n        )\n    }\n}\n\nexport default RecipeComponent\n\n"]},"metadata":{},"sourceType":"module"}
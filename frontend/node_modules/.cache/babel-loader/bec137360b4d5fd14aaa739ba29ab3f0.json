{"ast":null,"code":"import axios from 'axios';\n\nclass AuthenticationService {\n  //connect to backend BasicAuthenticationController using path\n  executeBasicAuthenticationService(username, password) {\n    return axios.get('http://localhost:8080/basicauth', {\n      headers: {\n        authorization: this.createBasicAuthToken(username, password)\n      }\n    });\n  } // need to send a post request with the username and password\n\n\n  executeJWTAuthenticationService(username, password) {\n    return axios.get('http://localhost:8080/authenticate', {\n      username,\n      password\n    });\n  }\n\n  createBasicAuthToken(username, password) {\n    return 'Basic ' + window.btoa(username + \":\" + password);\n  } // whenever a user logs in successfully, send that data to session storage\n\n\n  registerSuccessfulLogin(username, password) {\n    // console.log(\"registered login\")\n    sessionStorage.setItem('authenticatedUser', username);\n    this.setupAxiosInterceptors(this.createBasicAuthToken(username, password));\n  }\n\n  registerSuccessfulLoginForJWT(username, token) {\n    sessionStorage.setItem('authenticatedUser', username);\n    this.setupAxiosInterceptors(this.createJWTToken(token));\n  }\n\n  createJWTToken(token) {\n    return 'Bearer ' + token;\n  } //when a user logs out the value from session storage is removed\n\n\n  logout() {\n    sessionStorage.removeItem('authenticatedUser');\n  } //checks to see if a user has logged in to app\n\n\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem('authenticatedUser');\n\n    if (user === null) {\n      return false;\n    }\n\n    return true;\n  }\n\n  getLoggedInUser() {\n    let user = sessionStorage.getItem('authenticatedUser');\n\n    if (user === null) {\n      return '';\n    }\n\n    return user;\n  } //this will add an dditional parameter to axios get method call to make sure it sends an \n  //authorization header\n  // Method adding an intercepter (see axios github documentation) by creating a simple method that\n  //adds an authorization header to every request.\n  // you want to call this method at log in.\n\n\n  setupAxiosInterceptors(token) {\n    //moved and updated this(no more hardcode) to successfulLogin method\n    // let username = \"basil\"\n    // let password = \"basil\"\n    // let basicAuthenticationHeader = 'Basic '+ window.btoa(username + \":\" + password) \n    axios.interceptors.request.use(config => {\n      if (this.isUserLoggedIn()) {\n        config.headers.authorization = basicAuthenticationHeader;\n      }\n\n      return config;\n    });\n  }\n\n} //for react components export the class directly\n//for helper services, export an instance of the class  as an object\n\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["/Users/KatieLayne/Documents/basil-app/basil-app/src/components/recipes/AuthenticationService.js"],"names":["axios","AuthenticationService","executeBasicAuthenticationService","username","password","get","headers","authorization","createBasicAuthToken","executeJWTAuthenticationService","window","btoa","registerSuccessfulLogin","sessionStorage","setItem","setupAxiosInterceptors","registerSuccessfulLoginForJWT","token","createJWTToken","logout","removeItem","isUserLoggedIn","user","getItem","getLoggedInUser","interceptors","request","use","config","basicAuthenticationHeader"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AACA,MAAMC,qBAAN,CAA4B;AAGpB;AACAC,EAAAA,iCAAiC,CAACC,QAAD,EAAWC,QAAX,EAAqB;AAElD,WAAOJ,KAAK,CAACK,GAAN,CAAU,iCAAV,EACH;AAACC,MAAAA,OAAO,EAAE;AAACC,QAAAA,aAAa,EAAE,KAAKC,oBAAL,CAA0BL,QAA1B,EAAmCC,QAAnC;AAAhB;AAAV,KADG,CAAP;AAEH,GARmB,CAUpB;;;AACAK,EAAAA,+BAA+B,CAACN,QAAD,EAAWC,QAAX,EAAqB;AAEhD,WAAOJ,KAAK,CAACK,GAAN,CAAU,oCAAV,EAAgD;AACnDF,MAAAA,QADmD;AAEnDC,MAAAA;AAFmD,KAAhD,CAAP;AAIH;;AAEDI,EAAAA,oBAAoB,CAACL,QAAD,EAAWC,QAAX,EAAoB;AACpC,WAAO,WAAWM,MAAM,CAACC,IAAP,CAAYR,QAAQ,GAAG,GAAX,GAAiBC,QAA7B,CAAlB;AACH,GArBmB,CAuBxB;;;AACAQ,EAAAA,uBAAuB,CAACT,QAAD,EAAWC,QAAX,EAAqB;AAExC;AACAS,IAAAA,cAAc,CAACC,OAAf,CAAuB,mBAAvB,EAA4CX,QAA5C;AACA,SAAKY,sBAAL,CAA4B,KAAKP,oBAAL,CAA0BL,QAA1B,EAAmCC,QAAnC,CAA5B;AAEH;;AAEDY,EAAAA,6BAA6B,CAACb,QAAD,EAAUc,KAAV,EAAiB;AACtCJ,IAAAA,cAAc,CAACC,OAAf,CAAuB,mBAAvB,EAA4CX,QAA5C;AACA,SAAKY,sBAAL,CAA4B,KAAKG,cAAL,CAAoBD,KAApB,CAA5B;AAEP;;AAEDC,EAAAA,cAAc,CAACD,KAAD,EAAO;AACjB,WAAO,YAAYA,KAAnB;AACH,GAxCuB,CA0CxB;;;AACAE,EAAAA,MAAM,GAAG;AACLN,IAAAA,cAAc,CAACO,UAAf,CAA0B,mBAA1B;AACH,GA7CuB,CA+CxB;;;AACAC,EAAAA,cAAc,GAAG;AACb,QAAIC,IAAI,GAAGT,cAAc,CAACU,OAAf,CAAuB,mBAAvB,CAAX;;AACA,QAAID,IAAI,KAAI,IAAZ,EAAkB;AACd,aAAO,KAAP;AACH;;AACD,WAAO,IAAP;AACH;;AAEDE,EAAAA,eAAe,GAAG;AACd,QAAIF,IAAI,GAAGT,cAAc,CAACU,OAAf,CAAuB,mBAAvB,CAAX;;AACA,QAAID,IAAI,KAAI,IAAZ,EAAkB;AACd,aAAO,EAAP;AACH;;AACD,WAAOA,IAAP;AACH,GA9DuB,CAgE5B;AACA;AACA;AACA;AACA;;;AACIP,EAAAA,sBAAsB,CAACE,KAAD,EAAQ;AAC1B;AACA;AACA;AACA;AACAjB,IAAAA,KAAK,CAACyB,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACEC,MAAD,IAAY;AACR,UAAG,KAAKP,cAAL,EAAH,EAAyB;AACzBO,QAAAA,MAAM,CAACtB,OAAP,CAAeC,aAAf,GAA+BsB,yBAA/B;AACC;;AACD,aAAOD,MAAP;AACH,KANF;AAQH;;AAlFuB,C,CAqF5B;AACA;;;AACA,eAAe,IAAI3B,qBAAJ,EAAf","sourcesContent":["import axios from 'axios'\nclass AuthenticationService {\n   \n\n        //connect to backend BasicAuthenticationController using path\n        executeBasicAuthenticationService(username, password) {\n            \n            return axios.get('http://localhost:8080/basicauth', \n                {headers: {authorization: this.createBasicAuthToken(username,password)}})\n        }\n\n        // need to send a post request with the username and password\n        executeJWTAuthenticationService(username, password) {\n            \n            return axios.get('http://localhost:8080/authenticate', {\n                username,\n                password\n            })\n        }\n\n        createBasicAuthToken(username, password){\n            return 'Basic ' + window.btoa(username + \":\" + password)\n        }\n\n    // whenever a user logs in successfully, send that data to session storage\n    registerSuccessfulLogin(username, password) {\n\n        // console.log(\"registered login\")\n        sessionStorage.setItem('authenticatedUser', username)\n        this.setupAxiosInterceptors(this.createBasicAuthToken(username,password))\n\n    }\n\n    registerSuccessfulLoginForJWT(username,token) {\n            sessionStorage.setItem('authenticatedUser', username)\n            this.setupAxiosInterceptors(this.createJWTToken(token))\n\n    }\n\n    createJWTToken(token){\n        return 'Bearer ' + token\n    }\n\n    //when a user logs out the value from session storage is removed\n    logout() {\n        sessionStorage.removeItem('authenticatedUser')\n    }\n\n    //checks to see if a user has logged in to app\n    isUserLoggedIn() {\n        let user = sessionStorage.getItem('authenticatedUser')\n        if (user=== null) {\n            return false\n        } \n        return true      \n    }\n\n    getLoggedInUser() {\n        let user = sessionStorage.getItem('authenticatedUser')\n        if (user=== null) {\n            return ''\n        } \n        return user\n    }\n\n//this will add an dditional parameter to axios get method call to make sure it sends an \n//authorization header\n// Method adding an intercepter (see axios github documentation) by creating a simple method that\n//adds an authorization header to every request.\n// you want to call this method at log in.\n    setupAxiosInterceptors(token) {\n        //moved and updated this(no more hardcode) to successfulLogin method\n        // let username = \"basil\"\n        // let password = \"basil\"\n        // let basicAuthenticationHeader = 'Basic '+ window.btoa(username + \":\" + password) \n        axios.interceptors.request.use(\n         (config) => {\n             if(this.isUserLoggedIn()){\n             config.headers.authorization = basicAuthenticationHeader\n             }\n             return config\n         }\n        )\n    }\n}\n\n//for react components export the class directly\n//for helper services, export an instance of the class  as an object\nexport default new AuthenticationService()"]},"metadata":{},"sourceType":"module"}
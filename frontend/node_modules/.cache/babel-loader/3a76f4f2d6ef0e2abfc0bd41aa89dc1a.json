{"ast":null,"code":"var _jsxFileName = \"/Users/KatieLayne/Documents/basil-app/basil-app/src/components/recipes/ListRecipesComponent.jsx\";\nimport React, { Component } from 'react';\nimport AuthenticationService from './AuthenticationService.js';\nimport RecipeDataService from '../../api/recipes/RecipeDataService.js';\nimport { Card, ListGroup, CardColumns, Badge } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport logo from \"./logo2.png\";\n\nconst Recipe = props => React.createElement(Link, {\n  to: '/view/' + props.recipe.id,\n  className: \"link\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 11\n  },\n  __self: this\n}, React.createElement(Card, {\n  className: \"shadow grow\",\n  bg: \"light\",\n  style: {\n    marginTop: 10\n  },\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 12\n  },\n  __self: this\n}, React.createElement(Card.Img, {\n  variant: \"top\",\n  src: props.recipe.image,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 15\n  },\n  __self: this\n}), React.createElement(Card.Header, {\n  className: \"h5\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 17\n  },\n  __self: this\n}, props.recipe.title, \" \", React.createElement(Badge, {\n  variant: \"secondary\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 17\n  },\n  __self: this\n}, props.recipe.mealType)), React.createElement(ListGroup, {\n  variant: \"flush\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 18\n  },\n  __self: this\n}), React.createElement(Card.Body, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 20\n  },\n  __self: this\n}, React.createElement(\"button\", {\n  className: \"btn btn-primary\",\n  onClick: () => this.updateRecipeClicked(props.recipe.id),\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 21\n  },\n  __self: this\n}, \"Edit\"))));\n\nclass ListRecipesComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      recipes: []\n    };\n    this.refreshRecipes = this.refreshRecipes.bind(this);\n    this.addRecipeClicked = this.addRecipeClicked.bind(this);\n    this.updatrecipeClicked = this.updateRecipeClicked.bind(this);\n  }\n\n  componentDidMount() {\n    console.log(\"component did Mount\");\n    this.refreshRecipes();\n  }\n\n  refreshRecipes() {\n    //use the username by using authentication service\n    let username = AuthenticationService.getLoggedInUser();\n    RecipeDataService.retrieveAllRecipes(username).then(response => {\n      // console.log(response)\n      this.setState({\n        recipes: response.data\n      });\n    });\n  } // model code\n  //This function looks at the state's filterByField and filterByTerm and then returns a list of Recipe objects based on the parameters\n\n\n  recipeList() {\n    // let filterBy = this.state.filterByField\n    // let searchterm = this.state.filterByTerm.replace(/^\\s+|\\s+$/g, '') \n    return this.state.recipes.map(function (currentRecipe, i) {\n      return React.createElement(Recipe, {\n        recipe: currentRecipe,\n        key: i,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      });\n    });\n  } // push to that new recipe page by id to add\n\n\n  addRecipeClicked(id) {\n    this.props.history.push(`/recipes/-1`);\n  } //ROUTE  /recipes/{$id}\n  //     //edit button clicked\n  //     // push to that specific recipe page by id to edit\n\n\n  updateRecipeClicked(id) {\n    console.log('update ' + id);\n    this.props.history.push(`/recipes/${this.state.id}`);\n  }\n\n  render() {\n    //if search Field is set to anything other than category, it sets searchBar to a text input that will live update due to how the onChange attribute works\n    return React.createElement(\"div\", {\n      className: \"container pt-4\",\n      role: \"main\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"btn btn-dark\",\n      onClick: this.addRecipeClicked,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, \"Add Recipe\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      src: logo,\n      width: \"70\",\n      alt: \"github.com/klayne1129\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }), React.createElement(CardColumns, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, this.recipeList()));\n  }\n\n}\n\nexport default ListRecipesComponent; //ALTERNATE VIEW: TABLE FORMAT: \n// import React, { Component } from 'react'\n// import RecipeDataService from '../../api/recipes/RecipeDataService.js'\n// import AuthenticationService from './AuthenticationService.js'\n// class ListRecipesComponent extends Component {\n//     constructor(props) {\n//         super(props)\n//         this.state = {\n//             recipes: [],\n//             message: null\n//         }\n//         this.updatrecipeClicked = this.updateRecipeClicked.bind(this);\n//         this.viewRecipeClicked = this.viewRecipeClicked.bind(this);\n//         this.deleteRecipeClicked = this.deleteRecipeClicked.bind(this);\n//         this.refreshRecipes = this.refreshRecipes.bind(this);\n//         this.addRecipeClicked = this.addRecipeClicked.bind(this);\n//     }\n//     //dont call initial api in the constructor\n//     //if you do the state doesn't reinitialize until the api is finished \n//     componentDidMount() {\n//         console.log(\"component did Mount\")\n//         this.refreshRecipes();\n//     }\n//     refreshRecipes() {\n//         //use the username by using authentication service\n//         let username = AuthenticationService.getLoggedInUser()\n//         RecipeDataService.retrieveAllRecipes(username)\n//             .then(\n//                 response => {\n//                     // console.log(response)\n//                     this.setState({ recipes: response.data })\n//                 }\n//             )\n//     }\n//     // deletes recipe with username and id match, refreshes the recipe list\n//     deleteRecipeClicked(id) {\n//         let username = AuthenticationService.getLoggedInUser()\n//         // console.log(id + \" \" + username)\n//         RecipeDataService.deleteRecipe(username, id)\n//             .then(\n//                 response => {\n//                     this.setState({ message: `Deletion of recipe ${id} successful.` })\n//                     this.refreshRecipes()\n//                 }\n//             )\n//     }\n//     // push to that new recipe page by id to add\n//     addRecipeClicked(id) {\n//         this.props.history.push(`/recipes/-1`)\n//     }\n//     //ROUTE  /recipes/{$id}\n//     //edit button clicked\n//     // push to that specific recipe page by id to edit\n//     updateRecipeClicked(id) {\n//         console.log('update ' + id)\n//         this.props.history.push(`/recipes/${id}`)\n//     }\n//     viewRecipeClicked(id) {\n//         console.log('update ' + id)\n//         this.props.history.push(`/view/${id}`)\n//     }\n//     //Right now when the button is clicked it just wants to print the entire list page\n//     //should redirect to a single recipe page and THEN print\n//     render() {\n//         return (\n//             <div>\n//                 <h1>My List of Recipes</h1>\n//                 {this.state.message && <div className=\"alert alert-success\">{this.state.message}</div>}\n//                 <div className=\"container\">\n//                     <table className=\"table\">\n//                         <thead>\n//                             <tr>\n//                                 <th>Title</th>\n//                                 <th>Notes</th>\n//                                 <th>Meal Type</th>\n//                                 <th>View</th>\n//                                 <th>Edit</th>\n//                                 <th>Delete</th>\n//                             </tr>\n//                         </thead>\n//                         <tbody>\n//                             {\n//                                 this.state.recipes.map(\n//                                     recipe =>\n//                                         <tr key={recipe.id}>\n//                                             <td>{recipe.title}</td>\n//                                             <td>{recipe.notes}</td>\n//                                             <td>{recipe.mealType}</td>\n//                                             <td><button className=\"btn btn-dark\" onClick={() => this.viewRecipeClicked(recipe.id)} >View</button></td>\n//                                             <td><button className=\"btn btn-primary\" onClick={() => this.updateRecipeClicked(recipe.id)} >Edit</button></td>\n//                                             <td><button className=\"btn btn-danger\" onClick={() => this.deleteRecipeClicked(recipe.id)} >Delete</button></td>\n//                                             {/* <td><button className=\"btn btn-success\" value=\"Print\" onClick={() => this.printRecipeClicked()}>Print</button></td> */}\n//                                         </tr>\n//                                 )\n//                             }\n//                         </tbody>\n//                     </table>\n//                     <div className=\"row\">\n//                         <button className='btn btn-dark' onClick={this.addRecipeClicked}>Add Recipe</button>\n//                     </div>\n//                 </div>\n//             </div>\n//         )\n//     }\n// }\n// export default ListRecipesComponent","map":{"version":3,"sources":["/Users/KatieLayne/Documents/basil-app/basil-app/src/components/recipes/ListRecipesComponent.jsx"],"names":["React","Component","AuthenticationService","RecipeDataService","Card","ListGroup","CardColumns","Badge","Link","logo","Recipe","props","recipe","id","marginTop","image","title","mealType","updateRecipeClicked","ListRecipesComponent","constructor","state","recipes","refreshRecipes","bind","addRecipeClicked","updatrecipeClicked","componentDidMount","console","log","username","getLoggedInUser","retrieveAllRecipes","then","response","setState","data","recipeList","map","currentRecipe","i","history","push","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport AuthenticationService from './AuthenticationService.js'\nimport RecipeDataService from '../../api/recipes/RecipeDataService.js'\nimport { Card, ListGroup, CardColumns, Badge } from 'react-bootstrap';\nimport { Link } from 'react-router-dom'\nimport logo from \"./logo2.png\"\n\n\nconst Recipe = props => (\n\n    <Link to={'/view/' + props.recipe.id} className=\"link\">\n        <Card className=\"shadow grow\" bg='light' style={{ marginTop: 10 }} >\n\n\n            <Card.Img variant='top' src={props.recipe.image}></Card.Img>\n\n            <Card.Header className='h5'>{props.recipe.title} <Badge variant='secondary'>{props.recipe.mealType}</Badge></Card.Header>\n            <ListGroup variant=\"flush\" >\n            </ListGroup>\n            <Card.Body>\n            <button className=\"btn btn-primary\" onClick={() => this.updateRecipeClicked(props.recipe.id)} >Edit</button>\n            </Card.Body>\n        </Card>\n    </Link>\n\n)\n\nclass ListRecipesComponent extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            recipes: []\n        }\n        this.refreshRecipes = this.refreshRecipes.bind(this);\n        this.addRecipeClicked = this.addRecipeClicked.bind(this);\n        this.updatrecipeClicked = this.updateRecipeClicked.bind(this);\n\n    }\n\n    componentDidMount() {\n\n        console.log(\"component did Mount\")\n        this.refreshRecipes();\n    }\n\n    refreshRecipes() {\n\n        //use the username by using authentication service\n        let username = AuthenticationService.getLoggedInUser()\n        RecipeDataService.retrieveAllRecipes(username)\n            .then(\n                response => {\n                    // console.log(response)\n                    this.setState({ recipes: response.data })\n                }\n            )\n    }\n\n    // model code\n\n    //This function looks at the state's filterByField and filterByTerm and then returns a list of Recipe objects based on the parameters\n    recipeList() {\n        // let filterBy = this.state.filterByField\n        // let searchterm = this.state.filterByTerm.replace(/^\\s+|\\s+$/g, '') \n        return this.state.recipes.map(function (currentRecipe, i) {\n\n            return <Recipe recipe={currentRecipe} key={i} />\n        });\n    }\n    // push to that new recipe page by id to add\n    addRecipeClicked(id) {\n        this.props.history.push(`/recipes/-1`)\n    }\n    //ROUTE  /recipes/{$id}\n    //     //edit button clicked\n    //     // push to that specific recipe page by id to edit\n    updateRecipeClicked(id) {\n        console.log('update ' + id)\n        this.props.history.push(`/recipes/${this.state.id}`)\n    }\n\n    render() {\n\n\n        //if search Field is set to anything other than category, it sets searchBar to a text input that will live update due to how the onChange attribute works\n\n\n        return (\n\n            <div className='container pt-4' role='main'>\n                <div className=\"row\">\n                    <button className='btn btn-dark' onClick={this.addRecipeClicked}>Add Recipe</button>\n\n                </div>\n                <br></br>\n                {/* <h3 className='mt-3 ml-2 display-3'>Basil</h3> */}\n                <img src={logo} width=\"70\" alt=\"github.com/klayne1129\" />\n\n\n                <CardColumns>{this.recipeList()}\n\n                </CardColumns>\n                {/* <script src='script.js'></script> */}\n\n\n            </div>\n\n        )\n    }\n}\n\nexport default ListRecipesComponent\n\n\n//ALTERNATE VIEW: TABLE FORMAT: \n\n// import React, { Component } from 'react'\n// import RecipeDataService from '../../api/recipes/RecipeDataService.js'\n// import AuthenticationService from './AuthenticationService.js'\n\n\n\n// class ListRecipesComponent extends Component {\n\n//     constructor(props) {\n//         super(props)\n//         this.state = {\n//             recipes: [],\n//             message: null\n//         }\n//         this.updatrecipeClicked = this.updateRecipeClicked.bind(this);\n//         this.viewRecipeClicked = this.viewRecipeClicked.bind(this);\n//         this.deleteRecipeClicked = this.deleteRecipeClicked.bind(this);\n//         this.refreshRecipes = this.refreshRecipes.bind(this);\n//         this.addRecipeClicked = this.addRecipeClicked.bind(this);\n//     }\n\n//     //dont call initial api in the constructor\n//     //if you do the state doesn't reinitialize until the api is finished \n//     componentDidMount() {\n\n//         console.log(\"component did Mount\")\n//         this.refreshRecipes();\n//     }\n\n//     refreshRecipes() {\n\n//         //use the username by using authentication service\n//         let username = AuthenticationService.getLoggedInUser()\n//         RecipeDataService.retrieveAllRecipes(username)\n//             .then(\n//                 response => {\n//                     // console.log(response)\n//                     this.setState({ recipes: response.data })\n//                 }\n//             )\n//     }\n\n//     // deletes recipe with username and id match, refreshes the recipe list\n//     deleteRecipeClicked(id) {\n//         let username = AuthenticationService.getLoggedInUser()\n//         // console.log(id + \" \" + username)\n//         RecipeDataService.deleteRecipe(username, id)\n//             .then(\n//                 response => {\n//                     this.setState({ message: `Deletion of recipe ${id} successful.` })\n//                     this.refreshRecipes()\n//                 }\n//             )\n//     }\n//     // push to that new recipe page by id to add\n//     addRecipeClicked(id) {\n//         this.props.history.push(`/recipes/-1`)\n//     }\n\n//     //ROUTE  /recipes/{$id}\n//     //edit button clicked\n//     // push to that specific recipe page by id to edit\n//     updateRecipeClicked(id) {\n//         console.log('update ' + id)\n//         this.props.history.push(`/recipes/${id}`)\n//     }\n\n//     viewRecipeClicked(id) {\n//         console.log('update ' + id)\n//         this.props.history.push(`/view/${id}`)\n//     }\n\n//     //Right now when the button is clicked it just wants to print the entire list page\n//     //should redirect to a single recipe page and THEN print\n\n\n\n//     render() {\n//         return (\n//             <div>\n//                 <h1>My List of Recipes</h1>\n//                 {this.state.message && <div className=\"alert alert-success\">{this.state.message}</div>}\n//                 <div className=\"container\">\n//                     <table className=\"table\">\n//                         <thead>\n//                             <tr>\n//                                 <th>Title</th>\n//                                 <th>Notes</th>\n//                                 <th>Meal Type</th>\n//                                 <th>View</th>\n//                                 <th>Edit</th>\n//                                 <th>Delete</th>\n\n\n//                             </tr>\n//                         </thead>\n//                         <tbody>\n//                             {\n//                                 this.state.recipes.map(\n//                                     recipe =>\n\n\n//                                         <tr key={recipe.id}>\n//                                             <td>{recipe.title}</td>\n//                                             <td>{recipe.notes}</td>\n//                                             <td>{recipe.mealType}</td>\n//                                             <td><button className=\"btn btn-dark\" onClick={() => this.viewRecipeClicked(recipe.id)} >View</button></td>\n//                                             <td><button className=\"btn btn-primary\" onClick={() => this.updateRecipeClicked(recipe.id)} >Edit</button></td>\n//                                             <td><button className=\"btn btn-danger\" onClick={() => this.deleteRecipeClicked(recipe.id)} >Delete</button></td>\n//                                             {/* <td><button className=\"btn btn-success\" value=\"Print\" onClick={() => this.printRecipeClicked()}>Print</button></td> */}\n\n//                                         </tr>\n//                                 )\n//                             }\n\n//                         </tbody>\n//                     </table>\n\n//                     <div className=\"row\">\n//                         <button className='btn btn-dark' onClick={this.addRecipeClicked}>Add Recipe</button>\n\n//                     </div>\n//                 </div>\n//             </div>\n//         )\n//     }\n// }\n\n// export default ListRecipesComponent"]},"metadata":{},"sourceType":"module"}
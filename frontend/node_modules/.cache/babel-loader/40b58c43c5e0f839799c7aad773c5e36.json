{"ast":null,"code":"var _jsxFileName = \"/Users/KatieLayne/Documents/basil-app/basil-app/src/components/recipes/ListRecipesComponent.jsx\";\nimport React, { Component } from 'react';\nimport RecipeDataService from '../../api/recipes/RecipeDataService.js';\nimport AuthenticationService from './AuthenticationService.js';\nimport { Card, ListGroup, CardColumns, ButtonGroup, ToggleButton, Badge } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\n\nconst Recipe = props => React.createElement(Link, {\n  to: '/view/' + props.recipe.id,\n  className: \"link\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 10\n  },\n  __self: this\n}, React.createElement(Card, {\n  className: \"shadow grow\",\n  bg: \"light\",\n  style: {\n    marginTop: 10\n  },\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 11\n  },\n  __self: this\n}, React.createElement(Card.Img, {\n  variant: \"top\",\n  src: props.recipe.image,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 14\n  },\n  __self: this\n}), React.createElement(Card.Header, {\n  className: \"h5\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 16\n  },\n  __self: this\n}, props.recipe.title, \" \", React.createElement(Badge, {\n  variant: \"secondary\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 16\n  },\n  __self: this\n}, props.recipe.mealType)), React.createElement(ListGroup, {\n  variant: \"flush\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 17\n  },\n  __self: this\n})));\n\nclass ListRecipesComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      recipes: [],\n      message: null\n    };\n    this.updatrecipeClicked = this.updateRecipeClicked.bind(this);\n    this.viewRecipeClicked = this.viewRecipeClicked.bind(this);\n    this.deleteRecipeClicked = this.deleteRecipeClicked.bind(this);\n    this.refreshRecipes = this.refreshRecipes.bind(this);\n    this.addRecipeClicked = this.addRecipeClicked.bind(this);\n  } //dont call initial api in the constructor\n  //if you do the state doesn't reinitialize until the api is finished \n\n\n  componentDidMount() {\n    console.log(\"component did Mount\");\n    this.refreshRecipes();\n  }\n\n  refreshRecipes() {\n    //use the username by using authentication service\n    let username = AuthenticationService.getLoggedInUser();\n    RecipeDataService.retrieveAllRecipes(username).then(response => {\n      // console.log(response)\n      this.setState({\n        recipes: response.data\n      });\n    });\n  } // deletes recipe with username and id match, refreshes the recipe list\n\n\n  deleteRecipeClicked(id) {\n    let username = AuthenticationService.getLoggedInUser(); // console.log(id + \" \" + username)\n\n    RecipeDataService.deleteRecipe(username, id).then(response => {\n      this.setState({\n        message: `Deletion of recipe ${id} successful.`\n      });\n      this.refreshRecipes();\n    });\n  } // push to that new recipe page by id to add\n\n\n  addRecipeClicked(id) {\n    this.props.history.push(`/recipes/-1`);\n  } //ROUTE  /recipes/{$id}\n  //edit button clicked\n  // push to that specific recipe page by id to edit\n\n\n  updateRecipeClicked(id) {\n    console.log('update ' + id);\n    this.props.history.push(`/recipes/${id}`);\n  }\n\n  viewRecipeClicked(id) {\n    console.log('update ' + id);\n    this.props.history.push(`/view/${id}`);\n  } //Right now when the button is clicked it just wants to print the entire list page\n  //should redirect to a single recipe page and THEN print\n\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, \"My List of Recipes\"), this.state.message && React.createElement(\"div\", {\n      className: \"alert alert-success\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, this.state.message), React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(\"table\", {\n      className: \"table\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, \"Title\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, \"Notes\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, \"Meal Type\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, \"View\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, \"Edit\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, \"Delete\"))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, this.state.recipes.map(recipe => React.createElement(Link, {\n      to: '/view/' + props.recipe.id,\n      className: \"link\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(Card, {\n      key: recipe.id,\n      className: \"shadow grow\",\n      bg: \"light\",\n      style: {\n        marginTop: 10\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(Card.Img, {\n      variant: \"top\",\n      src: props.recipe.image,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }), React.createElement(Card.Header, {\n      className: \"h5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, props.recipe.title, \" \", React.createElement(Badge, {\n      variant: \"secondary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, props.recipe.mealType)), React.createElement(ListGroup, {\n      variant: \"flush\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }))) // <tr key={recipe.id}>\n    //     <td>{recipe.title}</td>\n    //     <td>{recipe.notes}</td>\n    //     <td>{recipe.mealType}</td>\n    //     <td><button className=\"btn btn-dark\" onClick={() => this.viewRecipeClicked(recipe.id)} >View</button></td>\n    //     <td><button className=\"btn btn-primary\" onClick={() => this.updateRecipeClicked(recipe.id)} >Edit</button></td>\n    //     <td><button className=\"btn btn-danger\" onClick={() => this.deleteRecipeClicked(recipe.id)} >Delete</button></td>\n    //     {/* <td><button className=\"btn btn-success\" value=\"Print\" onClick={() => this.printRecipeClicked()}>Print</button></td> */}\n    // </tr>\n    ))), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, React.createElement(CardColumns, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, this.recipeList())), React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"btn btn-dark\",\n      onClick: this.addRecipeClicked,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, \"Add Recipe\"))));\n  }\n\n}\n\nexport default ListRecipesComponent;","map":{"version":3,"sources":["/Users/KatieLayne/Documents/basil-app/basil-app/src/components/recipes/ListRecipesComponent.jsx"],"names":["React","Component","RecipeDataService","AuthenticationService","Card","ListGroup","CardColumns","ButtonGroup","ToggleButton","Badge","Link","Recipe","props","recipe","id","marginTop","image","title","mealType","ListRecipesComponent","constructor","state","recipes","message","updatrecipeClicked","updateRecipeClicked","bind","viewRecipeClicked","deleteRecipeClicked","refreshRecipes","addRecipeClicked","componentDidMount","console","log","username","getLoggedInUser","retrieveAllRecipes","then","response","setState","data","deleteRecipe","history","push","render","map","recipeList"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport RecipeDataService from '../../api/recipes/RecipeDataService.js'\nimport AuthenticationService from './AuthenticationService.js'\nimport { Card, ListGroup, CardColumns, ButtonGroup, ToggleButton, Badge } from 'react-bootstrap';\nimport { Link } from 'react-router-dom'\n\n\nconst Recipe = props => (\n\n    <Link to={'/view/' + props.recipe.id} className=\"link\">\n        <Card className=\"shadow grow\" bg='light' style={{ marginTop: 10 }} >\n\n\n            <Card.Img variant='top' src={props.recipe.image}></Card.Img>\n\n            <Card.Header className='h5'>{props.recipe.title} <Badge variant='secondary'>{props.recipe.mealType}</Badge></Card.Header>\n            <ListGroup variant=\"flush\" >\n\n            </ListGroup>\n\n\n        </Card>\n    </Link>\n\n\n)\nclass ListRecipesComponent extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            recipes: [],\n            message: null\n        }\n        this.updatrecipeClicked = this.updateRecipeClicked.bind(this);\n        this.viewRecipeClicked = this.viewRecipeClicked.bind(this);\n        this.deleteRecipeClicked = this.deleteRecipeClicked.bind(this);\n        this.refreshRecipes = this.refreshRecipes.bind(this);\n        this.addRecipeClicked = this.addRecipeClicked.bind(this);\n    }\n\n    //dont call initial api in the constructor\n    //if you do the state doesn't reinitialize until the api is finished \n    componentDidMount() {\n\n        console.log(\"component did Mount\")\n        this.refreshRecipes();\n    }\n\n    refreshRecipes() {\n\n        //use the username by using authentication service\n        let username = AuthenticationService.getLoggedInUser()\n        RecipeDataService.retrieveAllRecipes(username)\n            .then(\n                response => {\n                    // console.log(response)\n                    this.setState({ recipes: response.data })\n                }\n            )\n    }\n\n    // deletes recipe with username and id match, refreshes the recipe list\n    deleteRecipeClicked(id) {\n        let username = AuthenticationService.getLoggedInUser()\n        // console.log(id + \" \" + username)\n        RecipeDataService.deleteRecipe(username, id)\n            .then(\n                response => {\n                    this.setState({ message: `Deletion of recipe ${id} successful.` })\n                    this.refreshRecipes()\n                }\n            )\n    }\n    // push to that new recipe page by id to add\n    addRecipeClicked(id) {\n        this.props.history.push(`/recipes/-1`)\n    }\n\n    //ROUTE  /recipes/{$id}\n    //edit button clicked\n    // push to that specific recipe page by id to edit\n    updateRecipeClicked(id) {\n        console.log('update ' + id)\n        this.props.history.push(`/recipes/${id}`)\n    }\n\n    viewRecipeClicked(id) {\n        console.log('update ' + id)\n        this.props.history.push(`/view/${id}`)\n    }\n\n    //Right now when the button is clicked it just wants to print the entire list page\n    //should redirect to a single recipe page and THEN print\n\n\n\n    render() {\n        return (\n            <div>\n                <h1>My List of Recipes</h1>\n                {this.state.message && <div className=\"alert alert-success\">{this.state.message}</div>}\n                <div className=\"container\">\n                    <table className=\"table\">\n                        <thead>\n                            <tr>\n                                <th>Title</th>\n                                <th>Notes</th>\n                                <th>Meal Type</th>\n                                <th>View</th>\n                                <th>Edit</th>\n                                <th>Delete</th>\n\n\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                this.state.recipes.map(\n                                    recipe =>\n\n                                    <Link to={'/view/' + props.recipe.id} className=\"link\">\n                                    <Card key={recipe.id} className=\"shadow grow\" bg='light' style={{ marginTop: 10 }} >\n\n\n                                        <Card.Img variant='top' src={props.recipe.image}></Card.Img>\n\n                                        <Card.Header className='h5'>{props.recipe.title} <Badge variant='secondary'>{props.recipe.mealType}</Badge></Card.Header>\n                                        <ListGroup variant=\"flush\" >\n\n                                        </ListGroup>\n\n\n                                    </Card>\n                                </Link>\n                                        // <tr key={recipe.id}>\n                                        //     <td>{recipe.title}</td>\n                                        //     <td>{recipe.notes}</td>\n                                        //     <td>{recipe.mealType}</td>\n                                        //     <td><button className=\"btn btn-dark\" onClick={() => this.viewRecipeClicked(recipe.id)} >View</button></td>\n                                        //     <td><button className=\"btn btn-primary\" onClick={() => this.updateRecipeClicked(recipe.id)} >Edit</button></td>\n                                        //     <td><button className=\"btn btn-danger\" onClick={() => this.deleteRecipeClicked(recipe.id)} >Delete</button></td>\n                                        //     {/* <td><button className=\"btn btn-success\" value=\"Print\" onClick={() => this.printRecipeClicked()}>Print</button></td> */}\n\n                                        // </tr>\n                                )\n                            }\n\n                        </tbody>\n                    </table>\n\n                    <div>\n                        {/* {\n                            this.state.recipes.map(\n                                recipe =>\n                                  <Link to={'/view/' + props.recipe.id} className=\"link\">\n                                        <Card className=\"shadow grow\" bg='light' style={{ marginTop: 10 }} >\n\n\n                                            <Card.Img variant='top' src={props.recipe.image}></Card.Img>\n\n                                            <Card.Header className='h5'>{props.recipe.title} <Badge variant='secondary'>{props.recipe.mealType}</Badge></Card.Header>\n                                            <ListGroup variant=\"flush\" >\n\n                                            </ListGroup>\n\n\n                                        </Card>\n                                    </Link>\n                            )\n                        } */}\n\n                        <CardColumns>{this.recipeList()}</CardColumns>\n                    </div>\n                    <div className=\"row\">\n                        <button className='btn btn-dark' onClick={this.addRecipeClicked}>Add Recipe</button>\n\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default ListRecipesComponent"]},"metadata":{},"sourceType":"module"}
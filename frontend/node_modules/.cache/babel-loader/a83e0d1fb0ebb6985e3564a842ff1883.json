{"ast":null,"code":"var _jsxFileName = \"/Users/KatieLayne/Documents/basil-app/basil-app/src/components/recipes/RecipeComponent.jsx\";\nimport React, { Component } from 'react';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport RecipeDataService from '../../api/recipes/RecipeDataService.js';\nimport AuthenticationService from './AuthenticationService.js'; //create recipe page\n\nclass RecipeComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      id: this.props.match.params.id,\n      title: '',\n      directions: '',\n      ingredients: '',\n      notes: '',\n      mealType: 'selectOne',\n      image: '',\n      tags: '',\n      prepTime: '',\n      cookTime: '',\n      servings: '',\n      webLink: ''\n    };\n    this.onSubmit = this.onSubmit.bind(this);\n    this.validate = this.validate.bind(this);\n  } //call api's in this function\n  //Get specific recipe using usernamme and Id\n  //then update the object\n\n\n  componentDidMount() {\n    if (this.state.id === -1) {\n      return;\n    }\n\n    let username = AuthenticationService.getLoggedInUser();\n    RecipeDataService.retrieveRecipe(username, this.state.id).then(response => this.setState({\n      title: response.data.title,\n      directions: response.data.directions,\n      ingredients: response.data.ingredients,\n      notes: response.data.notes,\n      mealType: response.data.mealType,\n      image: response.data.image,\n      tags: response.data.tags,\n      prepTime: response.data.prepTime,\n      cookTime: response.data.cookTime,\n      servings: response.data.servings,\n      webLink: response.data.webLink\n    }));\n  } // if no value present 'enter blank'\n  // custom error message using errorMessage props\n  //errororMessage below unde render()\n\n\n  validate(values) {\n    let errors = {};\n\n    if (!values.title) {\n      errors.title = 'Enter title';\n    } else if (values.title.length < 2) {\n      errors.title = 'Title must be at least 2 characters in length';\n    }\n\n    if (!values.directions) {\n      errors.directions = 'Enter directions';\n    } else if (values.directions.length < 5) {\n      errors.directions = 'Directions must be at least 5 characters in length';\n    }\n\n    if (!values.ingredients) {\n      errors.ingredients = 'Enter ingredients';\n    } else if (values.ingredients.length < 2) {\n      errors.ingredients = 'Ingredients must be at least 2 characters in length';\n    }\n\n    if (values.mealType === \"selectOne\") {\n      errors.mealType = 'Select a meal type';\n    }\n\n    return errors;\n  }\n\n  onSubmit(values) {\n    let username = AuthenticationService.getLoggedInUser();\n    let recipe = {\n      id: this.state.id,\n      title: values.title,\n      directions: values.directions,\n      ingredients: values.ingredients,\n      notes: values.notes,\n      mealType: values.mealType,\n      image: values.image,\n      tags: values.tags,\n      prepTime: values.prepTime,\n      cookTime: values.cookTime,\n      servings: values.servings,\n      webLink: values.webLink\n    };\n\n    if (this.state.id === -1) {\n      RecipeDataService.createRecipe(username, recipe).then(() => this.props.history.push(`/recipes`));\n    } else {\n      RecipeDataService.updateRecipe(username, this.state.id, recipe).then(() => this.props.history.push(`/recipes`));\n    }\n  }\n\n  render() {\n    //destructuring \n    let {\n      title,\n      directions,\n      ingredients,\n      notes,\n      mealType,\n      image,\n      tags,\n      prepTime,\n      cookTime,\n      servings,\n      webLink\n    } = this.state;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, \"My Recipe\"), React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, React.createElement(Formik // usually you would need to list initial values as key value pairs\n    // but if the key is the same as the value you only have to \n    // list the value (name, directions, ingredients)\n    , {\n      initialValues: {\n        title,\n        directions,\n        ingredients,\n        notes,\n        mealType,\n        image,\n        tags,\n        prepTime,\n        cookTime,\n        servings,\n        webLink\n      } //sends ErrorMessages when validation fails only whens button clicked\n      //form only submited if validation passed \n      //enable reinitialization on formic or it will\n      //not update initial values, default is false\n      ,\n      onSubmit: this.onSubmit,\n      validateOnChange: false,\n      validateonBlur: false,\n      validate: this.validate,\n      enableReinitialize: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, props => React.createElement(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, React.createElement(ErrorMessage, {\n      name: \"title\",\n      component: \"div\",\n      className: \"alert alert-warning\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }), React.createElement(ErrorMessage, {\n      name: \"directions\",\n      component: \"div\",\n      className: \"alert alert-warning\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }), React.createElement(ErrorMessage, {\n      name: \"ingredients\",\n      component: \"div\",\n      className: \"alert alert-warning\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }), React.createElement(ErrorMessage, {\n      name: \"mealType\",\n      component: \"div\",\n      className: \"alert alert-warning\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }), React.createElement(\"fieldset\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, \"Title\"), React.createElement(Field, {\n      className: \"form-control\",\n      type: \"text\",\n      name: \"title\",\n      placeholder: \"e.g. Mama Freddie's Spaghetti\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    })), React.createElement(\"fieldset\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, \"Serving Size (Optional)\"), React.createElement(Field, {\n      className: \"form-control\",\n      type: \"text\",\n      name: \"servings\",\n      placeholder: \"8 servings\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    })), React.createElement(\"fieldset\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, \"Prep Time (Optional)\"), React.createElement(Field, {\n      className: \"form-control\",\n      type: \"text\",\n      name: \"prepTime\",\n      placeholder: \"5 mins\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    })), React.createElement(\"fieldset\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, \"Cook Time (Optional)\"), React.createElement(Field, {\n      className: \"form-control\",\n      type: \"text\",\n      name: \"cookTime\",\n      placeholder: \"20 mins\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    })), React.createElement(\"fieldset\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, \"Ingredients\"), React.createElement(Field, {\n      as: \"textarea\",\n      className: \"form-control\",\n      type: \"text\",\n      name: \"ingredients\",\n      id: \"textBox\",\n      placeholder: \"pasta sauce\\nspaghetti noodles\\n\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, \"Please press enter after each ingredient except the last one. Each ingredient should be on it's own line.\")), React.createElement(\"fieldset\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, \"Directions\"), React.createElement(Field, {\n      as: \"textarea\",\n      className: \"form-control\",\n      type: \"text\",\n      name: \"directions\",\n      id: \"textBox\",\n      placeholder: \"First boil water\\nPlace dry spaghetti noodles into boiling water\\n\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, \"Please press enter after each step except the last step. Each step should be on it's own line.\")), React.createElement(\"fieldset\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, \"Notes (Optional)\"), React.createElement(Field, {\n      className: \"form-control\",\n      type: \"text\",\n      name: \"notes\",\n      id: \"textBox\",\n      placeholder: \"Can freeze for meal prep.\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    })), React.createElement(\"fieldset\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, \"Meal Type\"), React.createElement(Field, {\n      as: \"select\",\n      name: \"mealType\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      selected: true,\n      value: \"selectOne\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, \"Select One\"), React.createElement(\"option\", {\n      value: \"entree\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }, \"Entree\"), React.createElement(\"option\", {\n      value: \"drink\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }, \"Drink\"), React.createElement(\"option\", {\n      value: \"snack\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }, \"Snack\"), React.createElement(\"option\", {\n      value: \"dessert\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, \"Dessert\"), React.createElement(\"option\", {\n      value: \"side\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, \"Side\"), React.createElement(\"option\", {\n      value: \"app\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }, \"Appetizer\"))), React.createElement(\"fieldset\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, \"Tags (Optional)\"), React.createElement(Field, {\n      className: \"form-control\",\n      type: \"text\",\n      name: \"tags\",\n      placeholder: \"easy,itallian,pasta\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }, \"Please seperate each tag with a comma.\")), React.createElement(\"fieldset\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }, \"Image URL (Optional)\"), React.createElement(Field, {\n      type: \"text\",\n      className: \"form-control\",\n      name: \"image\",\n      placeholder: \"https://www.spendwithpennies.com/wp-content/uploads/2019/03/Spaghetti-and-Meatballs-SpendWithPennies-4.jpg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }, \"If you see an image online you would like to use, right click image and hit \\\"open image in new tab\\\". Copy the url in your browser and paste it here.\")), React.createElement(\"fieldset\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    }, \"Website URL (Optional)\"), React.createElement(Field, {\n      type: \"text\",\n      className: \"form-control\",\n      name: \"webLink\",\n      placeholder: \"www.Freddie'sAwesomeSpaghetti.com\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }, \"Copy the desired website's url and paste it here.\")), React.createElement(\"button\", {\n      type: \"submit\",\n      className: \"btn btn-success\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }, \"Save\")))));\n  }\n\n}\n\nexport default RecipeComponent;","map":{"version":3,"sources":["/Users/KatieLayne/Documents/basil-app/basil-app/src/components/recipes/RecipeComponent.jsx"],"names":["React","Component","Formik","Form","Field","ErrorMessage","RecipeDataService","AuthenticationService","RecipeComponent","constructor","props","state","id","match","params","title","directions","ingredients","notes","mealType","image","tags","prepTime","cookTime","servings","webLink","onSubmit","bind","validate","componentDidMount","username","getLoggedInUser","retrieveRecipe","then","response","setState","data","values","errors","length","recipe","createRecipe","history","push","updateRecipe","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\n\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport RecipeDataService from '../../api/recipes/RecipeDataService.js'\nimport AuthenticationService from './AuthenticationService.js'\n\n\n//create recipe page\n\nclass RecipeComponent extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            id: this.props.match.params.id,\n            title: '',\n            directions: '',\n            ingredients: '',\n            notes: '',\n            mealType: 'selectOne',\n            image: '',\n            tags: '',\n            prepTime: '',\n            cookTime: '',\n            servings: '',\n            webLink: ''\n        }\n        this.onSubmit = this.onSubmit.bind(this)\n        this.validate = this.validate.bind(this)\n\n\n    }\n    //call api's in this function\n    //Get specific recipe using usernamme and Id\n    //then update the object\n    componentDidMount() {\n\n        if (this.state.id === -1) {\n            return\n        }\n\n        let username = AuthenticationService.getLoggedInUser()\n\n        RecipeDataService.retrieveRecipe(username, this.state.id)\n            .then(response => this.setState({\n                title: response.data.title,\n                directions: response.data.directions,\n                ingredients: response.data.ingredients,\n                notes: response.data.notes,\n                mealType: response.data.mealType,\n                image: response.data.image,\n                tags: response.data.tags,\n                prepTime: response.data.prepTime,\n                cookTime: response.data.cookTime,\n                servings: response.data.servings,\n                webLink: response.data.webLink\n            }))\n    }\n\n\n\n    // if no value present 'enter blank'\n    // custom error message using errorMessage props\n    //errororMessage below unde render()\n\n    validate(values) {\n        let errors = {}\n        if (!values.title) {\n            errors.title = 'Enter title'\n        } else if (values.title.length < 2) {\n            errors.title = 'Title must be at least 2 characters in length'\n        }\n\n        if (!values.directions) {\n            errors.directions = 'Enter directions'\n        } else if (values.directions.length < 5) {\n            errors.directions = 'Directions must be at least 5 characters in length'\n        }\n\n        if (!values.ingredients) {\n            errors.ingredients = 'Enter ingredients'\n        } else if (values.ingredients.length < 2) {\n            errors.ingredients = 'Ingredients must be at least 2 characters in length'\n        }\n\n        if (values.mealType === \"selectOne\") {\n            errors.mealType = 'Select a meal type'\n        }\n\n        return errors\n    }\n\n    onSubmit(values) {\n\n        let username = AuthenticationService.getLoggedInUser()\n\n        let recipe = {\n            id: this.state.id,\n            title: values.title,\n            directions: values.directions,\n            ingredients: values.ingredients,\n            notes: values.notes,\n            mealType: values.mealType,\n            image: values.image,\n            tags: values.tags,\n            prepTime: values.prepTime,\n            cookTime: values.cookTime,\n            servings: values.servings,\n            webLink: values.webLink\n        }\n\n        if (this.state.id === -1) {\n            RecipeDataService.createRecipe(username, recipe)\n                .then(() => this.props.history.push(`/recipes`))\n\n        } else {\n            RecipeDataService.updateRecipe(username, this.state.id, recipe)\n                .then(() => this.props.history.push(`/recipes`))\n        }\n\n    }\n\n    render() {\n        //destructuring \n        let { title, directions, ingredients, notes, mealType, image, tags, prepTime, cookTime, servings, webLink } = this.state\n\n        return (\n\n            <div>\n                <h1>My Recipe</h1>\n                <div className='container'>\n\n                    {/* defining a method that accepts props as input \n                        and returns the html of the form */}\n                    <Formik\n\n                        // usually you would need to list initial values as key value pairs\n                        // but if the key is the same as the value you only have to \n                        // list the value (name, directions, ingredients)\n                        initialValues={{ title, directions, ingredients, notes, mealType, image, tags, prepTime, cookTime, servings, webLink }}\n\n                        //sends ErrorMessages when validation fails only whens button clicked\n                        //form only submited if validation passed \n                        //enable reinitialization on formic or it will\n                        //not update initial values, default is false\n                        onSubmit={this.onSubmit}\n                        validateOnChange={false}\n                        validateonBlur={false}\n                        validate={this.validate}\n                        enableReinitialize={true}\n                    >\n                        {\n                            (props) => (\n                                <Form>\n\n                                    <ErrorMessage name='title' component='div' className='alert alert-warning' />\n                                    <ErrorMessage name='directions' component='div' className='alert alert-warning' />\n                                    <ErrorMessage name='ingredients' component='div' className='alert alert-warning' />\n                                    <ErrorMessage name='mealType' component='div' className='alert alert-warning' />\n\n                                    <fieldset className='form-group'>\n                                        <label>Title</label>\n                                        <Field className='form-control' type='text' name='title'  placeholder=\"e.g. Mama Freddie's Spaghetti\"/>\n                                    </fieldset>\n\n                                    <fieldset className='form-group'>\n                                        <label>Serving Size (Optional)</label>\n                                        <Field className='form-control' type='text' name='servings'  placeholder='8 servings'/>\n                                    </fieldset>\n\n                                    <fieldset className='form-group'>\n                                        <label>Prep Time (Optional)</label>\n                                        <Field className='form-control' type='text' name='prepTime'  placeholder='5 mins'/>\n                                    </fieldset>\n\n                                    <fieldset className='form-group'>\n                                        <label>Cook Time (Optional)</label>\n                                        <Field className='form-control' type='text' name='cookTime' placeholder='20 mins'/>\n                                    </fieldset>\n\n                                    <fieldset className='form-group'>\n                                        <label>Ingredients</label>\n                                        <Field as='textarea' className='form-control' type='text' name='ingredients' id='textBox' placeholder='pasta sauce&#10;spaghetti noodles&#10;'/>\n                                        <p>Please press enter after each ingredient except the last one. Each ingredient should be on it's own line.</p>\n                                    </fieldset>\n\n                                    <fieldset className='form-group'>\n                                        <label>Directions</label>\n                                        <Field as='textarea' className='form-control' type='text' name='directions' id='textBox' placeholder='First boil water&#10;Place dry spaghetti noodles into boiling water&#10;' />\n                                        <p>Please press enter after each step except the last step. Each step should be on it's own line.</p>\n                                    </fieldset>\n\n                                    <fieldset className='form-group'>\n                                        <label>Notes (Optional)</label>\n                                        <Field className='form-control' type='text' name='notes' id='textBox' placeholder='Can freeze for meal prep.' />\n                                    </fieldset>\n\n                                    <fieldset className='form-group'>\n                                        <label>Meal Type</label>\n                                        <Field as='select' name='mealType'>\n                                            <option selected value='selectOne'>Select One</option>\n                                            <option value='entree'>Entree</option>\n                                            <option value='drink'>Drink</option>\n                                            <option value='snack'>Snack</option>\n                                            <option value='dessert'>Dessert</option>\n                                            <option value='side'>Side</option>\n                                            <option value='app'>Appetizer</option>\n                                        </Field>\n                                    </fieldset>\n\n                                    <fieldset className='form-group'>\n                                        <label>Tags (Optional)</label>\n                                        <Field className='form-control' type='text' name='tags' placeholder='easy,itallian,pasta'/>\n                                        <p>Please seperate each tag with a comma.</p>\n                                    </fieldset>\n\n                                    <fieldset className=\"form-group\">\n                                        <label>Image URL (Optional)</label>\n                                        <Field type=\"text\" className=\"form-control\" name='image' placeholder=\"https://www.spendwithpennies.com/wp-content/uploads/2019/03/Spaghetti-and-Meatballs-SpendWithPennies-4.jpg\"/>\n                                        <p>If you see an image online you would like to use, right click image and hit \"open image in new tab\". Copy the url in your browser and paste it here.</p>\n                                    </fieldset>\n\n                                    <fieldset className=\"form-group\">\n                                        <label>Website URL (Optional)</label>\n                                        <Field type=\"text\" className=\"form-control\" name='webLink' placeholder=\"www.Freddie'sAwesomeSpaghetti.com\"/>\n                                        <p>Copy the desired website's url and paste it here.</p>\n                                    </fieldset>\n\n                                    <button type=\"submit\" className='btn btn-success'>Save</button>\n\n                                </Form>\n                            )\n                        }\n                    </Formik>\n\n                </div>\n\n            </div>\n        )\n    }\n}\n\nexport default RecipeComponent\n\n"]},"metadata":{},"sourceType":"module"}
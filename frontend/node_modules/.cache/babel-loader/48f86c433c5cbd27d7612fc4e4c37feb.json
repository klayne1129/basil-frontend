{"ast":null,"code":"var _jsxFileName = \"/Users/KatieLayne/Documents/basil-app/basil-app/src/components/recipes/RecipeComponent.jsx\";\nimport React, { Component } from 'react';\nimport moment from 'moment';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport RecipeDataService from '../../api/recipes/RecipeDataService.js';\nimport AuthenticationService from './AuthenticationService.js';\n\nclass RecipeComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      id: this.props.match.params.id,\n      name: \"Cooked Chicken\",\n      directions: \"Cook it.\",\n      ingredients: \"a chicken\"\n    };\n    this.onSubmit = this.onSubmit.bind(this);\n    this.validate = this.validate.bind(this);\n  } //call api's in this function\n  //Get specific recipe using usernamme and Id\n  //then update the object\n\n\n  componentDidMount() {\n    let username = AuthenticationService.getLoggedInUser();\n    RecipeDataService.retrieveRecipe(username, this.state.id).then(response => this.setState({\n      name: response.data.name,\n      directions: response.data.directions,\n      ingredients: response.data.ingredients\n    }));\n  }\n\n  validate(values) {\n    let errors = {};\n\n    if (!values.name) {\n      errors.name = 'Enter name';\n    } else if (values.name.length < 2) {\n      errors.directions = 'Name must be at least 2 characters in length';\n    }\n\n    if (!values.directions) {\n      errors.directions = 'Enter directions';\n    } else if (values.directions.length < 5) {\n      errors.directions = 'Directions must be at least 5 characters in length';\n    }\n\n    if (!values.ingredients) {\n      errors.ingredients = 'Enter ingredients';\n    } else if (values.ingredients.length < 2) {\n      errors.directions = 'Ingredients must be at least 2 characters in length';\n    }\n\n    return errors;\n  }\n\n  onSubmit(values) {\n    console.log(values);\n  }\n\n  render() {\n    //destructuring \n    let {\n      name,\n      directions,\n      ingredients\n    } = this.state;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, \"Recipe\"), React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(Formik // usually you would need to list IVs as key value pairs\n    // but if the key is the same as the value you only have to \n    // list the value (name, directions, ingredients)\n    , {\n      initialValues: {\n        name,\n        directions,\n        ingredients\n      } //sends ErrorMessages when validation fails only whens button clicked\n      //form only submited if validation passed \n      //enable reinitialization on formic or it will\n      //not update initial values, default is false\n      ,\n      onSubmit: this.onSubmit,\n      validateOnChange: false,\n      validateonBlur: false,\n      validate: this.validate,\n      enableReinitialize: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, props => React.createElement(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(ErrorMessage, {\n      name: \"name\",\n      component: \"div\",\n      className: \"alert alert-warning\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }), React.createElement(ErrorMessage, {\n      name: \"directions\",\n      component: \"div\",\n      className: \"alert alert-warning\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }), React.createElement(ErrorMessage, {\n      name: \"ingredients\",\n      component: \"div\",\n      className: \"alert alert-warning\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }), React.createElement(\"fieldset\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, \"Name\"), React.createElement(Field, {\n      className: \"form-control\",\n      type: \"text\",\n      name: \"name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    })), React.createElement(\"fieldset\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, \"Directions\"), React.createElement(Field, {\n      className: \"form-control\",\n      type: \"text\",\n      name: \"directions\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    })), React.createElement(\"fieldset\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, \"Ingredients\"), React.createElement(Field, {\n      className: \"form-control\",\n      type: \"text\",\n      name: \"ingredients\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    })), React.createElement(\"button\", {\n      type: \"submit\",\n      className: \"btn btn-success\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, \"Save\")))));\n  }\n\n}\n\nexport default RecipeComponent;","map":{"version":3,"sources":["/Users/KatieLayne/Documents/basil-app/basil-app/src/components/recipes/RecipeComponent.jsx"],"names":["React","Component","moment","Formik","Form","Field","ErrorMessage","RecipeDataService","AuthenticationService","RecipeComponent","constructor","props","state","id","match","params","name","directions","ingredients","onSubmit","bind","validate","componentDidMount","username","getLoggedInUser","retrieveRecipe","then","response","setState","data","values","errors","length","console","log","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\nimport moment from 'moment'\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport RecipeDataService from '../../api/recipes/RecipeDataService.js'\nimport AuthenticationService from './AuthenticationService.js'\n\n\nclass RecipeComponent extends Component {\n    constructor(props){\n        super(props)\n\n        this.state = {\n            id : this.props.match.params.id,\n            name : \"Cooked Chicken\",\n            directions : \"Cook it.\",\n            ingredients : \"a chicken\"\n        }\n        this.onSubmit = this.onSubmit.bind(this)\n        this.validate = this.validate.bind(this)\n        \n    }\n    //call api's in this function\n    //Get specific recipe using usernamme and Id\n    //then update the object\n    componentDidMount() {\n        let username = AuthenticationService.getLoggedInUser()\n        RecipeDataService.retrieveRecipe(username,this.state.id)\n            .then(response => this.setState({\n                name: response.data.name,\n                directions: response.data.directions,\n                ingredients: response.data.ingredients\n        }))\n    }\n\n    validate(values){\n        let errors = {}\n       if(!values.name){\n           errors.name = 'Enter name'\n       } else if(values.name.length<2){\n            errors.directions = 'Name must be at least 2 characters in length'\n       }\n\n       if(!values.directions){\n            errors.directions = 'Enter directions'\n        } else if(values.directions.length<5){\n            errors.directions = 'Directions must be at least 5 characters in length'\n        }\n\n        if(!values.ingredients){\n            errors.ingredients = 'Enter ingredients'\n        } else if(values.ingredients.length<2){\n            errors.directions = 'Ingredients must be at least 2 characters in length'\n        }\n\n        return errors\n    }\n\n    onSubmit(values){\n        console.log(values);\n    }\n\n    render() {\n        //destructuring \n        let {name, directions, ingredients} = this.state\n    \n        return (\n    \n            <div>\n                <h1>Recipe</h1>\n                <div className='container'>\n\n                    {/* defining a method that accepts props as input \n                        and reutns the html of the form */}\n                    <Formik  \n\n                        // usually you would need to list IVs as key value pairs\n                        // but if the key is the same as the value you only have to \n                        // list the value (name, directions, ingredients)\n                        initialValues={{name, directions,ingredients}}\n\n                        //sends ErrorMessages when validation fails only whens button clicked\n                        //form only submited if validation passed \n                        //enable reinitialization on formic or it will\n                        //not update initial values, default is false\n                        onSubmit={this.onSubmit}\n                        validateOnChange={false}\n                        validateonBlur={false}\n                        validate={this.validate}\n                        enableReinitialize={true}\n                    >\n                        {\n                            (props) => (\n                                <Form>\n                                    <ErrorMessage name='name' component='div' className='alert alert-warning'/>\n                                    <ErrorMessage name='directions' component='div' className='alert alert-warning'/>\n                                    <ErrorMessage name='ingredients' component='div' className='alert alert-warning'/>\n                                    <fieldset className='form-group'>\n                                        <label>Name</label>\n                                       <Field className='form-control' type='text' name='name'/>\n                                    </fieldset>\n\n                                    <fieldset className='form-group'>\n                                        <label>Directions</label>\n                                       <Field className='form-control' type='text' name='directions'/>\n                                    </fieldset>\n\n                                    <fieldset className='form-group'>\n                                        <label>Ingredients</label>\n                                       <Field className='form-control' type='text' name='ingredients'/>\n                                    </fieldset>\n                                    <button type=\"submit\" className='btn btn-success'>Save</button>\n                                 </Form>\n                                )\n                        }\n                        </Formik>\n\n                </div>\n             \n            </div>\n                     )\n    }\n}\n\nexport default RecipeComponent"]},"metadata":{},"sourceType":"module"}